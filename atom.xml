<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mark</title>
  
  <subtitle>Markの博客</subtitle>
  <link href="http://www.liniuniu.top/atom.xml" rel="self"/>
  
  <link href="http://www.liniuniu.top/"/>
  <updated>2022-04-17T18:44:07.017Z</updated>
  <id>http://www.liniuniu.top/</id>
  
  <author>
    <name>Mark</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot框架的使用详解</title>
    <link href="http://www.liniuniu.top/posts/e9332395.html"/>
    <id>http://www.liniuniu.top/posts/e9332395.html</id>
    <published>2022-04-17T16:20:00.000Z</published>
    <updated>2022-04-17T18:44:07.017Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class="line-numbers language-none"><code class="language-none"># 一、Spring Boot入门## 1、Spring Boot简介Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。## 2、微服务微服务：架构风格（服务微化）一个应用应该是一组小型服务，可以通过HTTP的方式进行互通单体应用：ALL IN ONE微服务：每个功能元素最终都是一个可以独立替换和升级的软件单元## 3、环境准备环境约束- jdk1.8- maven 3.x :maven3.3以上- IDEA2017- SpringBoot 1.5.9RELEASE### 1、MAVEN设置```xml&lt;!-- 配置JDK版本 --&gt;&lt;profile&gt;        &lt;id&gt;jdk18&lt;/id&gt;        &lt;activation&gt;            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;            &lt;jdk&gt;1.8&lt;/jdk&gt;        &lt;/activation&gt;        &lt;properties&gt;            &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;            &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;            &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;        &lt;/properties&gt;     &lt;/profile&gt;   &lt;!-- 当 nexus-aliyun 下不了的包，或许这个镜像能下，        才开放它，这个实在太慢，而且要把它放在首位，即 nexus-aliyun 之前，做过测试。        所以它的用途只有那么一瞬间，就是或许它能下载，可以通过 url 去查找确定一下    --&gt;    &lt;!-- &lt;mirror&gt;        &lt;id&gt;spring-libs-milestone&lt;/id&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;name&gt;Spring Milestones&lt;/name&gt;        &lt;url&gt;http://repo.spring.io/libs-milestone&lt;/url&gt;    &lt;/mirror&gt; --&gt;    &lt;!-- nexus-aliyun 首选，放第一位,有不能下载的包，再去做其他镜像的选择  --&gt;    &lt;mirror&gt;        &lt;id&gt;nexus-aliyun&lt;/id&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        &lt;name&gt;Nexus aliyun&lt;/name&gt;        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;    &lt;/mirror&gt;    &lt;!-- 备选镜像，也是可以通过 url 去查找确定一下，        该镜像是否含有你想要的包，它比 spring-libs-milestone 快  --&gt;    &lt;mirror&gt;        &lt;id&gt;central-repository&lt;/id&gt;        &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;        typor&lt;name&gt;Central Repository&lt;/name&gt;        &lt;url&gt;http://central.maven.org/maven2/&lt;/url&gt;    &lt;/mirror&gt;  ```### 2、IDEA设置    配置IDEA的Maven，指定Setting的Maven目录和MAVEN的setting.xml文件快捷键：Ctrl+D 复制一行Ctrl+Y 删除一行Ctrl+P 参数提示Ctrl+Alt+V 自动补齐方法Ctrl+N 查找类方法Alt+Ins 构造器、getter/setter toStringCtrl+O 重载方法提示Alt+Enter 提示导入类etcShift+F6 :文件重命名## 4、Spring Boot的Hello World### 1、创建一个Maven工程### 2、导入Spring Boot的相关依赖```xml&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    &lt;java.version&gt;1.8&lt;/java.version&gt;&lt;/properties&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;```### 3、编写个主程序```java@SpringBootApplicationpublic class SpringBoot01HelloQuickApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);    }}```### 4、编写相应的Controller和Service```java@Controllerpublic class HelloController {    @ResponseBody    @RequestMapping("/hello")    public  String  hello(){        return "hello world";    }}```### 5、运行主程序测试访问 localhost:8080/hello### 6、简化部署在pom.xml文件中，导入build插件```xml&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;```## 5、HelloWorld深度理解### 1.POM.xml文件#### 1、父项目```xml&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;```这个父项目**spring-boot-starter-parent**又依赖一个父项目```xml&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;    &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;&lt;/parent&gt;```下面有个属性，定义了对应的版本号```xml&lt;properties&gt;    &lt;activemq.version&gt;5.15.3&lt;/activemq.version&gt;    &lt;antlr2.version&gt;2.7.7&lt;/antlr2.version&gt;    &lt;appengine-sdk.version&gt;1.9.63&lt;/appengine-sdk.version&gt;    &lt;artemis.version&gt;2.4.0&lt;/artemis.version&gt;    &lt;aspectj.version&gt;1.8.13&lt;/aspectj.version&gt;    &lt;assertj.version&gt;3.9.1&lt;/assertj.version&gt;    &lt;atomikos.version&gt;4.0.6&lt;/atomikos.version&gt;    &lt;bitronix.version&gt;2.1.4&lt;/bitronix.version&gt;    &lt;build-helper-maven-plugin.version&gt;3.0.0&lt;/build-helper-maven-plugin.version&gt;    。。。。。。。```Spring Boot的版本仲裁中心 会自动导入对应的版本，不需要我们自己导入依赖，没有dependencies里面管理的依赖自己声明#### 2、启动器```xml&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;```**spring-boot-starter-web:**帮我们导入web模块正常运行所依赖的组件**spring boot**将所有的功能场景都抽取出来，做成一个个的starter(启动器)，只需要在项目里引入这些starter相关场景的所有依赖都会被导入进来，要用什么功能就导入什么场景的启动器。### 2、主程序入口```java@SpringBootApplicationpublic class SpringBoot01HelloQuickApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBoot01HelloQuickApplication.class, args);    }}```**@SpringBootApplication:** 说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动应用进入SpringBootApplication注解```java@Target({ElementType.TYPE})@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(    excludeFilters = {@Filter(    type = FilterType.CUSTOM,    classes = {TypeExcludeFilter.class}), @Filter(    type = FilterType.CUSTOM,    classes = {AutoConfigurationExcludeFilter.class})})public @interface SpringBootApplication {```**@SpringBootConfiguration**：SpringBoot的配置类： 标准在某个类上，表示这是一个SpringBoot的配置类**@Configuration**:配置类上，来标注这个注解；配置类 ---- 配置文件，也是容器中的一个组件（@Component）**@EnableAutoConfiguration**:开启自动配置功能以前需要自动配置的东西，Spring Boot帮我们自动配置；@EnableAutoConfiguration告诉SpringBoot开启自动配置功能；这样自动配置才能生效。 ```java@AutoConfigurationPackage@Import({AutoConfigurationImportSelector.class})public @interface EnableAutoConfiguration { ```**@AutoConfigurationPackage**:自动配置包**@Import({Registrar.class})**：底层注解，给容器导入组件；将主配置类（@SpringBootApplication标注的类）的所在包及下面所有的子包里面的所有组件扫描到Spring容器； **@Import({AutoConfigurationImportSelector.class})：**给容器导入组件？ AutoConfigurationImportSelector：导入组件选择器 将所有需要导入的组件以及全类名的方式返回；这些组件将以字符串数组 String[] 添加到容器中；会给容器非常多的自动配置类，（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置好这些组件。 ![1.configuration](E:\工作文档\SpringBoot\images\1.configuration.jpg)```javaprotected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata,AnnotationAttributes attributes) {List&lt;String&gt; configurations =SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),this.getBeanClassLoader());Assert.notEmpty(configurations, "No auto configuration classes found in META‐INF/spring.factories. If you are using a custom packaging, make sure that file is correct.");return configurations;} ````SpringFactoriesLoader.loadFactoryNames(this.getSpringFactoriesLoaderFactoryClass(),``this.getBeanClassLoader());` Spring Boot在启动的时候从类路径下的META-INF/spring.factorys中获取的EnableAutoConfiguration指定的值；将这些值作为自动配置类导入到容器中，自动配置就生效了。 ![2.factories](E:\工作文档\SpringBoot\images\2.factories.jpg)J2EE的整体解决方案org\springframework\boot\spring-boot-autoconfigure\2.0.1.RELEASE\spring-boot-autoconfigure-2.0.1.RELEASE.jar ## 6、使用Spring Initializer创建一个快速向导 1.IDE支持使用Spring Initializer自己选择需要的组件:例如web默认生成的SpringBoot项目 - 主程序已经生成好了，我们只需要完成我们的逻辑- resources文件夹目录结构  - static:保存所有的静态文件；js css images  - templates:保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat,默认不支持JSP）；可    以使用模板引擎（freemarker.thymeleaf）;  - application.properties:Spring Boot的默认配置，例如 server.port=9000 # 二、配置文件 ## 1、配置文件 Spring Boot使用全局配置文件，配置文件名是固定的；- application.properties- application.yml 配置文件作用：修改Spring Boot在底层封装好的默认值；YAML（YAML AIN'T Markup Language）是一个标记语言又不是一个标记语言 **标记语言：**以前的配置文件；大多数使用的是 xxx.xml文件；以数据为中心，比json、xml等更适合做配置文件YAML：配置例子 ```yamlserver:port: 9000 ```XML: ```xml&lt;server&gt;&lt;port&gt;9000&lt;/port&gt;&lt;/server&gt; ```## 2、YAML语法 ### 1、基本语法 k:(空格)v:表示一堆键值对（空格必须有）；以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一层级的 ```yamlserver:port: 9000path: /hello ```属性和值也是大小写敏感 ### 2、值的写法**字面量：普通的值（数字，字符串，布尔）** k: v:字面直接来写；字符串默认不用加上单引号或者双引号"":**双引号** 不会转义字符串里的特殊字符；特殊字符会作为本身想要表示的意思`name:"zhangsan\n lisi"` 输出：`zhangsan换行 lisi`'':**单引号** 会转义特殊字符，特殊字符最终只是一个普通的字符串数据`name:'zhangsan\n lisi'` 输出：`zhangsan\n lisi` **对象、Map（属性和值）键值对** k :v ：在下一行来写对象的属性和值的关系；注意空格控制缩进对象还是k:v的方式 ```yamlfrends:lastName: zhangsanage: 20 ```行内写法 ```yamlfriends: {lastName: zhangsan,age: 18} ```**数组（List、Set）:**用-表示数组中的一个元素 ```yamlpets: ‐ cat ‐ dog ‐ pig ```行内写法 ```yamlpets: [cat,dog,pig] ```**组合变量**多个组合到一起 ## 3、配置文件值注入 ### 1、@ConfigurationProperties1、application.yml 配置文件 ```yamlperson:  age: 18  boss: false  birth: 2017/12/12  maps: {k1: v1,k2: 12}  lists:   - lisi   - zhaoliu  dog:    name: wangwang    age: 2  last-name: wanghuahua````application.properties` 配置文件（二选一） ```propertiesidea配置文件utf-8properties 默认GBKperson.age=12person.boss=falseperson.last-name=张三person.maps.k1=v1person.maps.k2=v2person.lists=a,b,cperson.dog.name=wanghuahuperson.dog.age=15```所以中文输出乱码，改进settings--&gt;file encoding --&gt;[property--&gt;utf-8 ,勾选转成ascii] javaBean ```java/*** 将配置文件的配置每个属性的值，映射到组件中* @ConfigurationProperties:告诉SpringBoot将文本的所有属性和配置文件中的相关配置进行绑定；* prefix = "person" 配置文件爱你的那个属性进行一一映射* *只有这个组件是容器中的组件，才能提供到容器中*/@Component@ConfigurationProperties(prefix = "person")public class Person {    private String lastName;    private Integer age;    private Boolean boss;    private Map&lt;String,Object&gt; maps;    private List&lt;Object&gt; lists;    private Dog dog;```导入配置文件处理器，以后编写配置就有提示了 ```xml&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring‐boot‐configuration‐processor&lt;/artifactId&gt;&lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt; ```### 2、@Value注解更改javaBean中的注解```java@Componentpublic class Person {    /**     * &lt;bean class="Person"&gt;     *     &lt;property name="lastName" value="字面量/${key}从环境变量/#{spEL}"&gt;&lt;/property&gt;     * &lt;/bean&gt;     */    @Value("${person.last-name}")    private String lastName;    @Value("#{11*2}")    private Integer age;    @Value("true")    private Boolean boss;```|          | @ConfigurationProperties | @Value || :------: | :----------------------: | :----: ||    功能    |        批量注入配置文件属性        |  单个指定  || 松散绑定(语法) |            支持            |  不支持   ||   spEL   |           不支持            |   支持   || JSR303校验 |            支持            |  不支持   ||   复杂类型   |            支持            |  不支持   |&gt; 松散语法：javaBean中last-name(或者lastName) --&gt;application.properties中的last-name;&gt;&gt; spEL语法：#{11*2} &gt;&gt; JSR303：@Value会直接忽略，校验规则JSR303校验：```java@Component@ConfigurationProperties(prefix = "person")@Validatedpublic class Person {    @Email    private String lastName;```复杂类型栗子：```java@Componentpublic class Person {    /**     * &lt;bean class="Person"&gt;     *     &lt;property name="lastName" value="字面量/${key}从环境变量/#{spEL}"&gt;&lt;/property&gt;     * &lt;/bean&gt;     */    private String lastName;    private Integer age;    private Boolean boss;   // @Value("${person.maps}")    private Map&lt;String,Object&gt; maps;```以上会报错，不支持复杂类型**使用场景分析**如果说，我们只是在某个业务逻辑中获取一下配置文件的某一项值，使用@Value；如果专门编写了一个javaBean和配置文件进行映射，我们直接使用@ConfigurationProperties举栗子：1、编写新的Controller文件```java@RestControllerpublic class HelloController {    @Value("${person.last-name}")    private String name;    @RequestMapping("/hello")    public  String sayHello(){        return "Hello"+ name;    }}```2、配置文件```propertiesperson.age=12person.boss=falseperson.last-name=李四person.maps.k1=v1person.maps.k2=v2person.lists=a,b,cperson.dog.name=wanghuahuperson.dog.age=15```3、测试运行访问 localhost:9000/hello结果为`Hello 李四`### 3、其他注解 **@PropertySource**作用：加载指定的properties配置文件1、新建一个person.properties文件```propertiesperson.age=12person.boss=falseperson.last-name=李四person.maps.k1=v1person.maps.k2=v2person.lists=a,b,cperson.dog.name=wanghuahuperson.dog.age=15```2、在javaBean中加入@PropertySource注解```java@PropertySource(value = {"classpath:person.properties"})@Component@ConfigurationProperties(prefix = "person")public class Person {    private String lastName;```**@ImportResource**作用：导入Spring配置文件，并且让这个配置文件生效1、新建一个Spring的配置文件，bean.xml```xml&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;    &lt;bean id="HelloService" class="com.wdjr.springboot.service.HelloService"&gt;&lt;/bean&gt;&lt;/beans&gt;```2、编写测试类，检查容器是否加载Spring配置文件写的bean```java@AutowiredApplicationContext ioc;@Testpublic void testHelloService(){    boolean b = ioc.containsBean("HelloService");    System.out.println(b);}```&gt; import org.springframework.context.ApplicationContext;3、运行检测结果为false，没有加载配置的内容4、使用@ImportResource注解将@ImportResource标注在主配置类上```java@ImportResource(locations={"classpath:beans.xml"})@SpringBootApplicationpublic class SpringBoot02ConfigApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBoot02ConfigApplication.class, args);    }}```5、再次运行检测结果为true缺点：每次指定xml文件太麻烦SpringBoot推荐给容器添加组件的方式：1、配置类=====Spring的xml配置文件（old）2、全注解方式@Configuration+@Bean（new）![4.MyAppConfig](E:\工作文档\SpringBoot\images\4.MyAppConfig.jpg)```java/** * @Configuration：指明当前类是一个配置类；就是来代替之前的Spring配置文件 * * 在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件 */@Configurationpublic class MyAppConfig {    //将方法的返回值添加到容器中；容器这个组件id就是方法名    @Bean    public HelloService helloService01(){        System.out.println("配置类给容器添加了HelloService组件");        return new HelloService();    }}``````java@AutowiredApplicationContext ioc;@Testpublic void testHelloService(){    boolean b = ioc.containsBean("helloService01");    System.out.println(b);}``` *容器这个组件id就是方法名* ## 4、配置文件占位符#### 1、随机数```properties${random.value} 、${random.int}、${random.long}${random.int(10)}、${random.int[100,200]}```#### 2、获取配置值```propertiesperson.age=${random.int}person.boss=falseperson.last-name=张三${random.uuid}person.maps.k1=v1person.maps.k2=v2person.lists=a,b,cperson.dog.name=${person.last-name}'s wanghuahuperson.dog.age=15```存在以下两种情况没有声明`person.last-name`会报错，新声明的需要加默认值```propertiesperson.age=${random.int}person.boss=falseperson.last-name=张三${random.uuid}person.maps.k1=v1person.maps.k2=v2person.lists=a,b,cperson.dog.name=${person.hello:hello}'s wanghuahuperson.dog.age=15```结果：输出`hello's wanghuahua`## 5、Profile### 1、多Profile文件我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml- application.properties- application-dev.properties- application-prod.properties默认使用application.propertiesapplication.properties配置文件指定```propertiesspring.profiles.active=dev```### 2、YAML文档块```yamlserver:  port: 8081spring:  profiles:    active: dev---server:  port: 9000spring:  profiles: dev---server:  port: 80spring:  profiles: prod```### 3、激活指定profile1、在配置文件中激活2、命令行：--spring.profiles.active=dev![5.comandLine](E:\工作文档\SpringBoot\images\5.comandLine.jpg)优先级大于配置文件打包 成jar后`java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev`虚拟机参数`-Dspring.profiles.active=dev`## 6、加载配置文件位置SpringBoot启动扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件- file:./config/- file./- classpath:/config/- classpath:/优先级从高到低顺序，高优先级会覆盖低优先级的相同配置；互补配置也可以通过spring.config.location来改变默认配置&gt; ```&gt; server.servlet.context-path=/boot03&gt; ```注：spring boot1x 是server.context.path=/boot02![7.priority](E:\工作文档\SpringBoot\images\7.priority.jpg)还可以通过spring.config.location来改变配置文件的位置项目打包好了以后，可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认的配置文件会共同起作用，互补配置`java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=E:/work/application.properties`运维比较有用，从外部加载，不用修改别的文件## 7.引入外部配置**SpringBoot也可以从以下位置加载配置；优先级从高到低；高优先级覆盖低优先级，可以互补**1. 命令行参数   java -jar spring-boot-config-02-0.0.1-SNAPSHOT.jar --server.port=9005 --server.context-path=/abc   中间一个空格2. 来自java:comp/env的JNDI属性3. java系统属性（System.getProperties()）4. 操作系统环境变量5. RandomValuePropertySource配置的random.*属性值      **优先加载profile,    由jar包外到jar包内**6. **jar包外部的application-{profile}.properties或application.yml(带Spring.profile)配置文件**7. **jar包内部的application-{profile}.properties或application.yml(带Spring.profile)配置文件**8. **jar包外部的application.properties或application.yml(带Spring.profile)配置文件**9. **jar包内部的application.properties或application.yml(不带spring.profile)配置文件**   10. @Configuration注解类的@PropertySource11. 通过SpringApplication.setDefaultProperties指定的默认属性[官方文档](https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#boot-features-external-config)## 8、自动配置配置文件到底怎么写？[Spring的所有配置参数](https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties)自动配置原理很关键### 1、自动配置原理1）、SpringBoot启动的时候加载主配置类，开启自动配置功能，@EnableAutoConfiguration2）、@EnableAutoConfiguration 作用：- 利用AutoConfigurationImportSelector给容器中导入一些组件？- 可以查看selectImports()方法的内容- 获取候选的配置```javaList&lt;String&gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes);```- 扫描类路径下的```java  SpringFactoriesLoader.loadFactoryNames(）  扫描所有jar包类路径下的 MATA-INF/spring.factories  把扫描到的这些文件的内容包装成properties对象  从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加到容器中```将类路径下 MATE-INF/spring.factories里面配置的所有的EnableAutoConfiguration的值加入到了容器中；3）、每一个自动配置类进行自动配置功能；4）、以**HttpEncodingAutoConfiguration** 为例```java@Configuration //表示是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件@EnableConfigurationProperties({HttpEncodingProperties.class})//启动指定类的Configurationproperties功能；将配置文件中的值和HttpEncodingProperties绑定起来了；并把HttpEncodingProperties加入ioc容器中@ConditionalOnWebApplication//根据不同的条件，进行判断，如果满足条件，整个配置类里面的配置就会失效，判断是否为web应用；(    type = Type.SERVLET)@ConditionalOnClass({CharacterEncodingFilter.class})//判断当前项目有没有这个类，解决乱码的过滤器@ConditionalOnProperty(    prefix = "spring.http.encoding",    value = {"enabled"},    matchIfMissing = true)//判断配置文件是否存在某个配置 spring.http.encoding，matchIfMissing = true如果不存在也是成立，即使不配置也生效public class HttpEncodingAutoConfiguration {   //给容器添加组件，这个组件的值需要从properties属性中获取    private final HttpEncodingProperties properties;//只有一个有参数构造器情况下，参数的值就会从容器中拿    public HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {        this.properties = properties;    }    @Bean    @ConditionalOnMissingBean    public CharacterEncodingFilter characterEncodingFilter() {        CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();        filter.setEncoding(this.properties.getCharset().name());        filter.setForceRequestEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.REQUEST));        filter.setForceResponseEncoding(this.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpEncodingProperties.Type.RESPONSE));        return filter;    }```5）、所有在配置文件中能配置的属性都是在xxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类```java@ConfigurationProperties(prefix = "spring.http.encoding")//从配置文件中的值进行绑定和bean属性进行绑定public class HttpEncodingProperties {```根据当前不同条件判断，决定这个配置类是否生效？一旦这个配置类生效；这个配置类会给容器添加各种组件；这些组件的属性是从对应的properties中获取的，这些类里面的每个属性又是和配置文件绑定的### 2、所有的自动配置组件每一个xxxAutoConfiguration这样的类都是容器中的一个组件，都加入到容器中；作用：用他们做自动配置```properties# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\org.springframework.boot.autoconfigure.reactor.core.ReactorCoreAutoConfiguration,\org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ClientAutoConfiguration,\org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration```### 3、精髓：1）、SpringBoot启动会加载大量的自动配置类2）、我们看我们需要的功能有没有SpringBoot默认写好的默认配置类；3）、如果有在看这个自动配置类中配置了哪些组件；（只要我们要用的组件有，我们需要再来配置）4）、给容器中自动配置添加组件的时候，会从properties类中获取属性。我们就可以在配置文件中指定这些属性的值xxxAutoConfiguration:自动配置类；给容器中添加组件xxxProperties:封装配置文件中的属性；跟之前的Person类一样，配置文件中值加入bean中### 4、细节#### 1、@Conditional派生注解 &gt; 利用Spring注解版原生的@Conditional作用作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；| @Conditional派生注解                | 作用（判断是否满足当前指定条件）               || ------------------------------- | ------------------------------ || @ConditionalOnJava              | 系统的java版本是否符合要求                || @ConditionalOnBean              | 容器中存在指定Bean                    || @ConditionalOnMissBean          | 容器中不存在指定Bean                   || @ConditionalOnExpression        | 满足spEL表达式                      || @ConditionalOnClass             | 系统中有指定的类                       || @ConditionalOnMissClass         | 系统中没有指定的类                      || @ConditionalOnSingleCandidate   | 容器中只有一个指定的Bean,或者这个Bean是首选Bean || @ConditionalOnProperty          | 系统中指定的属性是否有指定的值                || @ConditionalOnResource          | 类路径下是否存在指定的资源文件                || @ConditionalOnWebApplication    | 当前是web环境                       || @ConditionalOnNotWebApplication | 当前不是web环境                      || @ConditionalOnJndi              | JNDI存在指定项                      |#### 2、自动配置报告自动配置类必须在一定条件下生效我们可以通过启用debug=true属性，配置文件，打印自动配合报告，这样就可以知道自动配置类生效```propertiesdebug=true```自动配置报告```java============================CONDITIONS EVALUATION REPORT============================Positive matches:（启动的，匹配成功的）-----------------   CodecsAutoConfiguration matched:      - @ConditionalOnClass found required class 'org.springframework.http.codec.CodecConfigurer'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)        ......         Negative matches:（没有启动的，没有匹配成功的）-----------------   ActiveMQAutoConfiguration:      Did not match:         - @ConditionalOnClass did not find required classes 'javax.jms.ConnectionFactory', 'org.apache.activemq.ActiveMQConnectionFactory' (OnClassCondition).....```# 三、日志&gt; Spring Boot2对日志有更改### 1、日志框架小张：开发一个大型系统；1、System.out.println("");将关键数据打印在控制台；去掉？卸载文件中2、框架记录系统的一些运行信息；日志框架zhanglog.jar3、高大上功能，异步模式？自动归档？xxx?zhanglog-good.jar?4、将以前的框架卸下来？换上新的框架，重新修改之前的相关API;zhanglog-perfect.jar;5、JDBC--数据库驱动；写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar;给项目中导入具体的日志实现就行；我们之前的日志框架都是实现的抽象层；市面上的日志框架| 日志抽象层                                                   | 日志实现                                        || ------------------------------------------------------------ | ----------------------------------------------- || ~~JCL(Jakarta Commons Logging)~~ SLF4j(Simple Logging Facade for Java) ~~jboss-logging~~ | Log4j ~~JUL(java.util.logging)~~ Log4j2 Logback ||                                                              |                                                 |左边的抽象，右边的实现SLF4J  -- LogbackSpring Boot:底层是Spring框架，Spring默认框架是JCL；SpringBoot选用SLF4J和logback### 2、SLF4J使用#### 1、如何在系统中使用SLF4j以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；应该给系统里面导入slf4j的jar包和logback的实现jar```javaimport org.slf4j.Logger;import org.slf4j.LoggerFactory;public class HelloWorld {  public static void main(String[] args) {    Logger logger = LoggerFactory.getLogger(HelloWorld.class);    logger.info("Hello World");  }}```![8.slf4j](E:\工作文档\SpringBoot\images\8.slf4j.jpg)每个日志框架的实现框架都有自己的配置文件。使用slf4j以后，**配置文件还是做成日志实现框架本身的配置文件**；#### 2、遗留问题a系统(slf4j+logback)：Spring（commons-logging）、Hibernate（jboss-logging）、Mybatis统一日志框架，即使是别的框架和我一起统一使用slf4j进行输出；核心：1、将系统中其他日志框架排除出去；2、用中间包来替换原有的日志框架/3、导入slf4j的其他实现### 3、SpingBoot日志框架解析打开IDEA ，打开pom文件的依赖图形化显示![9.IDEAdependencies](E:\工作文档\SpringBoot\images\9.IDEAdependencies.jpg)SpringBoot的基础框架```xml&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;```SpringBoot的日志功能```xml&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;    &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;```![10.slf4jandlogback](E:\工作文档\SpringBoot\images\10.slf4jandlogback.jpg)总结：1. SpringBoot底层也是使用SLF4J+log4jback2. SpringBoot也把其他日志替换成了slf4j3. 起着commons.loggings的名字其实new的SLF4J替换中间包   SpringBoot2中改成了bridge4. 如果要引入其他框架？一定要把这个框架的日志依赖移除掉，而且底层### 4、日志的使用#### 1、默认配置trace-debug-info-warn-error可以调整需要的日志级别进行输出，不用注释语句。```java//记录器Logger logger = LoggerFactory.getLogger(getClass());@Testpublic void contextLoads() {    //日志的级别    //从低到高    //可以调整输出的日志级别；日志就只会在这个级别以后的高级别生效    logger.trace("这是trace日志");    logger.debug("这是debug信息");    //SpringBoot默认给的是info级别，如果没指定就是默认的root级别    logger.info("这是info日志");    logger.warn("这是warn信息");    logger.error("这是Error信息");}```调整指定包的日志级别在配置文件中进行配置```propertieslogging.level.com.wdjr=trace```日志输出格式```properties#控制台输出的日志格式 #%d：日期#%thread：线程号 #%-5level：靠左 级别 #%logger{50}：全类名50字符限制,否则按照句号分割#%msg：消息+换行#%n：换行logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n```SpringBoot修改日志的默认配置```propertieslogging.level.com.wdjr=trace#不指定path就是当前目录下生成springboot.log#logging.file=springboot.log#当前磁盘下根路径创建spring文件中log文件夹，使用spring.log作为默认logging.path=/spring/log#控制台输出的日志格式 日期 + 线程号 + 靠左 级别 +全类名50字符限制+消息+换行logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n#指定文件中日志输出的格式logging.pattern.file=xxx```#### 2、指定配置给类路径下放上每个日志框架自己的配置框架；SpringBoot就不会使用自己默认的配置| logging System         | Customization                                                || ---------------------- | ------------------------------------------------------------ || Logback                | logback-spring.xml ,logback-spring.groovy,logback.xml or logback.groovy || Log4J2                 | log4j2-spring.xml or log4j2.xml                              || JDK(Java Util Logging) | logging.properties                                           |logback.xml直接被日志框架识别 ，logback-spring.xml日志框架就不直接加载日志配置项，由SpringBoot加载```xml&lt;springProfile name="dev"&gt;&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;&lt;/springProfile&gt;&lt;springProfile name!="dev"&gt;&lt;!-- 可以指定某段配置只在某个环境下生效 --&gt;&lt;/springProfile&gt;```如何调试开发环境,输入命令行参数--spring.profiles.active=dev如果不带后面的xx-spring.xml就会报错### 3、切换日志框架可以根据slf4j的日志适配图，进行相关切换；#### 1、log4jslf4j+log4j的方式；![11.log4j](E:\工作文档\SpringBoot\images\11.log4j.jpg)```xml&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;    &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;&lt;/dependency&gt;```不推荐使用仅作为演示#### 2、log4j2切换为log4j2```xml&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;&lt;/dependency&gt;```# 四、web开发## 1、简介使用SpringBoot;1)、创建SpringBoot应用，选中我们需要的模块；2)、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来3)、自己编写业务代码**自动配置原理？**这个场景的SpringBoot帮我们配置了什么？能不能修改？能修改那些配置？能不能扩展？xxx```javaxxxAutoConfiguration:帮我们给容器中自动配置组件xxxProperties:配置类来封装配置文件的内容```## 2、静态资源文件映射规则```java@ConfigurationProperties(prefix = "spring.resources", ignoreUnknownFields = false)public class ResourceProperties implements ResourceLoaderAware, InitializingBean {    //可以设置和静态资源相关的参数，缓存时间等``````java@Overridepublic void addResourceHandlers(ResourceHandlerRegistry registry) {   if (!this.resourceProperties.isAddMappings()) {      logger.debug("Default resource handling disabled");      return;   }   Integer cachePeriod = this.resourceProperties.getCachePeriod();   if (!registry.hasMappingForPattern("/webjars/**")) {      customizeResourceHandlerRegistration(registry            .addResourceHandler("/webjars/**")            .addResourceLocations("classpath:/META-INF/resources/webjars/")            .setCachePeriod(cachePeriod));   }   String staticPathPattern = this.mvcProperties.getStaticPathPattern();   if (!registry.hasMappingForPattern(staticPathPattern)) {      customizeResourceHandlerRegistration(            registry.addResourceHandler(staticPathPattern)                  .addResourceLocations(                        this.resourceProperties.getStaticLocations())                  .setCachePeriod(cachePeriod));   }}```### 1、webjar1)、所有的/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；webjars：以jar包的方式引入静态资源http://www.webjars.org/![12.jquery](E:\工作文档\SpringBoot\images\12.jquery.jpg)localhost:8080/webjars/jquery/3.3.1/jquery.js### 2、本地资源```private String staticPathPattern = "/**";```访问任何资源2、会在这几文件夹下去找静态路径（静态资源文件夹）```"classpath:/META-INF/resources/", "classpath:/resources/","classpath:/static/", "classpath:/public/","/";当前项目的根路径```![13.static](E:\工作文档\SpringBoot\images\13.static.jpg)localhost:8080/abc ==&gt;去静态资源文件夹中找abc![14.static-css](E:\工作文档\SpringBoot\images\14.static-css.jpg)3、index页面欢迎页，静态资源文件夹下所有的index.html页面；被“/**”映射；localhost:8080/  --&gt;index页面```JAVA@Beanpublic WelcomePageHandlerMapping welcomePageHandlerMapping(      ResourceProperties resourceProperties) {   return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),         this.mvcProperties.getStaticPathPattern());}```4、喜欢的图标，即网站title的图标favicon```java@Configuration@ConditionalOnProperty(value = "spring.mvc.favicon.enabled", matchIfMissing = true)public static class FaviconConfiguration {   private final ResourceProperties resourceProperties;   public FaviconConfiguration(ResourceProperties resourceProperties) {      this.resourceProperties = resourceProperties;   }   @Bean   public SimpleUrlHandlerMapping faviconHandlerMapping() {      SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();      mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);       //把任何favicon的图标都在静态文件夹下找      mapping.setUrlMap(Collections.singletonMap("**/favicon.ico",            faviconRequestHandler()));      return mapping;   }   @Bean   public ResourceHttpRequestHandler faviconRequestHandler() {      ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();      requestHandler            .setLocations(this.resourceProperties.getFaviconLocations());      return requestHandler;   }}```可以在配置文件配置静态资源文件夹```propertiesspring.resources.static-locations=classpath:xxxx```## 3、模板引擎将html和数据 结合到一起 输出组装处理好的新文件SpringBoot推荐Thymeleaf;语法简单，功能强大### 1、引入thymeleaf 3```xml&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;```默认导入thymeleaf2，版本太低 所以使用thymeleaf3.[官方导入办法](https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3)```xml&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    &lt;java.version&gt;1.8&lt;/java.version&gt;    &lt;!--thymeleaf 3的导入--&gt;    &lt;thymeleaf.version&gt;3.0.9.RELEASE&lt;/thymeleaf.version&gt;    &lt;!--布局功能支持 同时支持thymeleaf3主程序 layout2.0以上版本  --&gt;    &lt;!--布局功能支持 同时支持thymeleaf2主程序 layout1.0以上版本  --&gt;    &lt;thymeleaf-layout-dialect.version&gt;2.2.2&lt;/thymeleaf-layout-dialect.version&gt;&lt;/properties&gt;```### 2、Thymeleaf使用和语法```java@ConfigurationProperties(prefix = "spring.thymeleaf")public class ThymeleafProperties {   private static final Charset DEFAULT_ENCODING = Charset.forName("UTF-8");   private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf("text/html");   public static final String DEFAULT_PREFIX = "classpath:/templates/";   public static final String DEFAULT_SUFFIX = ".html";   //只要把HTML文件方法类路径下的template文件夹下，就会自动导入```只要把HTML页面放到classpath:/templates/,thymeleaf就能自动渲染；使用：1、导入thymeleaf的名称空间```html&lt;html xmlns:th="http://www.thymeleaf.org"&gt;    ```2、使用thymeleaf语法；```html&lt;!DOCTYPE html&gt;&lt;html lang="en"  xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt;    &lt;meta charset="UTF-8" /&gt;    &lt;title&gt;success&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;success&lt;/h1&gt;&lt;!--th:text 将div里面的文本内容设置为--&gt;&lt;div th:text="${Lion}"&gt;前端数据&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;```3、语法规则1）、th:text="${hello}"可以使用任意标签 替换原生的任何属性**在SpringBoot的环境下**```html&lt;div id="testid" class="testcalss" th:id="${Lion}" th:class="${Lion}" th:text="${Lion}"&gt;前端数据&lt;/div&gt;```![15.thtmeleaf-th01](E:\工作文档\SpringBoot\images\15.thtmeleaf-th01.jpg)**直接访问HTML页面**![15.thtmeleaf-th02](E:\工作文档\SpringBoot\images\15.thtmeleaf-th02.jpg)**2)、内联写法注意需要在body上加上 th:inline="text"敲黑板**不然不起作用```html&lt;body class="text-center" th:inline="text"&gt;&lt;/body&gt;```th标签的访问优先级Order Feature Attributes### 3、语法规则|      | 功能                            | 标签                                 | 功能和jsp对比                             || ---- | ------------------------------- | ------------------------------------ | ----------------------------------------- || 1    | Fragment inclusion              | th:insert th:replace                 | include(片段包含)                         || 2    | Fragment iteration              | th:each                              | c:forEach(遍历)                           || 3    | Conditional evaluation          | th:if th:unless th:switch th:case    | c:if(条件判断)                            || 4    | Local variable definition       | th:object  th:with                   | c:set(声明变量)                           || 5    | General attribute modification  | th:attr th:attrprepend th:attrappend | 属性修改支持前面和后面追加内容            || 6    | Specific attribute modification | th:value th:href th:src ...          | 修改任意属性值                            || 7    | Text (tag body modification)    | th:text th:utext                     | 修改标签体内容utext：不转义字符&lt;h1&gt;大标题 || 8    | Fragment specification          | th:fragment                          | 声明片段                                  || 9    | Fragment removal                | th:remove                            |                                           | ```propertiesSimple expressions:(表达式语法)    Variable Expressions: ${...}    1、获取对象属性、调用方法    2、使用内置基本对象：        #ctx : the context object.            #vars: the context variables.            #locale : the context locale.            #request : (only in Web Contexts) the HttpServletRequest object.            #response : (only in Web Contexts) the HttpServletResponse object.            #session : (only in Web Contexts) the HttpSession object.            #servletContext : (only in Web Contexts) the ServletContext object.         3、内置一些工具对象        #execInfo : information about the template being processed.        #messages : methods for obtaining externalized messages inside variables expressions, in the same way as they            would be obtained using #{…} syntax.            #uris : methods for escaping parts of URLs/URIs            #conversions : methods for executing the configured conversion service (if any).            #dates : methods for java.util.Date objects: formatting, component extraction, etc.            #calendars : analogous to #dates , but for java.util.Calendar objects.            #numbers : methods for formatting numeric objects.            #strings : methods for String objects: contains, startsWith, prepending/appending, etc.            #objects : methods for objects in general.            #bools : methods for boolean evaluation.            #arrays : methods for arrays.            #lists : methods for lists.            #sets : methods for sets.            #maps : methods for maps.            #aggregates : methods for creating aggregates on arrays or collections.            #ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).    Selection Variable Expressions: *{...} //选择表达式：和${}功能一样，补充功能   # 配合th:object使用，object=${object} 以后获取就可以使用*{a}  相当于${object.a}      &lt;div th:object="${session.user}"&gt;            &lt;p&gt;Name: &lt;span th:text="*{firstName}"&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;            &lt;p&gt;Surname: &lt;span th:text="*{lastName}"&gt;Pepper&lt;/span&gt;.&lt;/p&gt;            &lt;p&gt;Nationality: &lt;span th:text="*{nationality}"&gt;Saturn&lt;/span&gt;.&lt;/p&gt;&lt;/div&gt;    Message Expressions: #{...} //获取国际化内容    Link URL Expressions: @{...} //定义URL链接    #&lt;a href="details.html" th:href="@{/order/details(orderId=${o.id})}"&gt;view&lt;/a&gt;    Fragment Expressions: ~{...}//片段文档    Literals（字面量）    Text literals: 'one text' , 'Another one!' ,…    Number literals: 0 , 34 , 3.0 , 12.3 ,…    Boolean literals: true , false    Null literal: null    Literal tokens: one , sometext , main ,…Text operations:(文本操作)    String concatenation: +    Literal substitutions: |The name is ${name}|Arithmetic operations:（数学运算）    Binary operators: + , - , * , / , %    Minus sign (unary operator): -Boolean operations:（布尔运算）    Binary operators: and , or    Boolean negation (unary operator): ! , notComparisons and equality:（比较运算）    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )    Equality operators: == , != ( eq , ne )Conditional operators:（条件运算）    If-then: (if) ? (then)    If-then-else: (if) ? (then) : (else)    Default: (value) ?: (defaultvalue)Special tokens:（空操作）No-Operation: _```inline写法```html[[]] --&gt;th:text[()] --&gt;th:utext```## 4、SpringMVC自动配置### 1、SpringMVC的自动导入[Spring框架](https://docs.spring.io/spring-boot/docs/1.5.12.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications)自动配置好了mvc：以下是SpringBoot对SpringMVC的默认Spring Boot provides auto-configuration for Spring MVC that works well with most applications.The auto-configuration adds the following features on top of Spring’s defaults:- Inclusion of `ContentNegotiatingViewResolver` and `BeanNameViewResolver` beans.  - 自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象（View）,视图对象决定如何渲染（转发？重定向？）)  - `ContentNegotiatingViewResolver`组合所有视图解析器  - 如何定制：我们可以自己给容器中添加一个视图解析器；自动将其整合进来- Support for serving static resources, including support for WebJars (see below).静态资源- Static `index.html` support.- Custom `Favicon` support (see below).- 自动注册 了`Converter`, `GenericConverter`, `Formatter` beans.  - `Converter`：类型转换 文本转为字面量  - `Formatter` ：格式化器 转换后格式转换    ```java    @Bean    @ConditionalOnProperty(prefix = "spring.mvc", name = "date-format")//在文件配置入职格式化的规则    public Formatter&lt;Date&gt; dateFormatter() {       return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件    }    ```    自己添加的格式化转换器，只需要放在容器中即可- Support for `HttpMessageConverters` (see below).  - `HttpMessageConverters` ：转换HTTP转换和响应：User - json  - `HttpMessageConverters` ：是从容器中确定；获取所有的`HttpMessageConverters`  ，将自己的组件注册在容器中@Bean   - If you need to add or customize converters you can use Spring Boot’s `HttpMessageConverters` class:    ```java    import org.springframework.boot.autoconfigure.web.HttpMessageConverters;    import org.springframework.context.annotation.*;    import org.springframework.http.converter.*;        @Configuration    public class MyConfiguration {            @Bean        public HttpMessageConverters customConverters() {            HttpMessageConverter&lt;?&gt; additional = ...            HttpMessageConverter&lt;?&gt; another = ...            return new HttpMessageConverters(additional, another);        }        }    ```- Automatic registration of `MessageCodesResolver` (see below).  - 定义错误代码生成规则- Automatic use of a `ConfigurableWebBindingInitializer` bean (see below).  - ```java    @Override    protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {       try {          return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class);       }       catch (NoSuchBeanDefinitionException ex) {          return super.getConfigurableWebBindingInitializer();       }    }    ```    在beanFactory：中可以自己创建一个，初始化webDataBinder    请求数据 ==》javaBeanIf you want to keep Spring Boot MVC features, and you just want to add additional [MVC configuration](https://docs.spring.io/spring/docs/4.3.16.RELEASE/spring-framework-reference/htmlsingle#mvc) (interceptors, formatters, view controllers etc.) you can add your own `@Configuration` class of type `WebMvcConfigurerAdapter`, but **without** `@EnableWebMvc`. If you wish to provide custom instances of `RequestMappingHandlerMapping`, `RequestMappingHandlerAdapter` or `ExceptionHandlerExceptionResolver` you can declare a `WebMvcRegistrationsAdapter` instance providing such components.If you want to take complete control of Spring MVC, you can add your own `@Configuration` annotated with `@EnableWebMvc`.思想：修改默认配置### 2、扩展SpringMVC编写一个配置类，类型是WebMvcConfigurerAdapter(继承)，使用WebMvcConfigurerAdapter可以扩展，不能标注@EnableWebMvc;既保留了配置，也能拓展我们自己的应用```java@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter {    @Override    public void addViewControllers(ViewControllerRegistry registry) {//        super.addViewControllers(registry);        //浏览器发送wdjr请求，也来到success页面        registry.addViewController("/wdjr").setViewName("success");    }}```原理：1）、WebMvcAutoConfiguration是SpringMVC的自动配置2）、在做其他自动配置时会导入；@Import(EnableWebMvcConfiguration.class)```java@Configurationpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {    private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();//从容器中获取所有webMVCconfigurer@Autowired(required = false)public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) {if (!CollectionUtils.isEmpty(configurers)) {this.configurers.addWebMvcConfigurers(configurers);                        @Override                protected void addViewControllers(ViewControllerRegistry registry) {                    this.configurers.addViewControllers(registry);                }            //一个参考实现,将所有的webMVCconfigurer相关配置一起调用（包括自己的配置类）            @Override               // public void addViewControllers(ViewControllerRegistry registry) {                   // for (WebMvcConfigurer delegate : this.delegates) { //delegate.addViewControllers(registry);                    //}                }}}    ```3）、自己的配置被调用效果：SpringMVC的自动配置和我们的扩展配置都会起作用### 3、全面接管mvc不需要SpringBoot对SpringMVC的自动配置。```java@EnableWebMvc@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter {@Overridepublic void addViewControllers(ViewControllerRegistry registry) {//        super.addViewControllers(registry);        //浏览器发送wdjr请求，也来到success页面        registry.addViewController("/wdjr").setViewName("success");    }}```例如静态资源访问，不推荐全面接管原理：为什么@EnableWebMvc注解，SpringBoot对SpringMVC的控制就失效了1）、核心配置```java@Import(DelegatingWebMvcConfiguration.class)public @interface EnableWebMvc {}```2）、DelegatingWebMvcConfiguration```java@Configurationpublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {```3）、WebMvcAutoConfiguration```java@Configuration@ConditionalOnWebApplication@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,      WebMvcConfigurerAdapter.class })//容器没有这个组件的时候，这个自动配置类才生效@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,      ValidationAutoConfiguration.class })public class WebMvcAutoConfiguration {```4）、@EnableWebMvc将WebMvcConfigurationSupport导入进来了；5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能## 5、修改SpringMVC默认配置模式:1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；2）、在SpringBoot中会有 xxxConfigurer帮助我们扩展配置。## 6、RestfulCRUD### 1、默认访问首页在config/MyConfig.java中编写配置类```java//所有的webMvcConfigurerAdapter组件会一起起作用@Bean //註冊到容器去public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){    WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {        @Override        public void addViewControllers(ViewControllerRegistry registry) {            registry.addViewController("/").setViewName("login");            registry.addViewController("/login.html").setViewName("login");        }    };    return adapter;}```静态资源引用```html&lt;link href="#" th:href="@{/css/signin.css}" rel="stylesheet" /&gt;```### 2、国际化1、编写国际化配置文件2、使用ResourceBundleMessageSource管理国际化资源文件3、在页面中使用fmt:message，取出国际化内容#### 1、浏览器切换国际化步骤1、编写国际化配置文件，抽取页面需要的显示的国际化消息![16.national](E:\工作文档\SpringBoot\images\16.national.jpg)2、SpringBoot自动配置好了国际化配置的资源文件```java@ConfigurationProperties(prefix = "spring.messages")public class MessageSourceAutoConfiguration {    //我们的配置文件可以直接放在类路径下叫messages.properties    private String basename = "messages";    @Beanpublic MessageSource messageSource() {ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();if (StringUtils.hasText(this.basename)) {            //设置国际化文件的基础名，去掉语言国家代码messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(this.basename)));}if (this.encoding != null) {messageSource.setDefaultEncoding(this.encoding.name());}messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);messageSource.setCacheSeconds(this.cacheSeconds);messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);return messageSource;}```3、对IDEA的编码进行设置![17.encoding](E:\工作文档\SpringBoot\images\17.encoding.jpg)4、login进行标签插入```html&lt;!DOCTYPE html&gt;&lt;!-- saved from url=(0051)https://getbootstrap.com/docs/4.1/examples/sign-in/ --&gt;&lt;html lang="en" xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt;    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;        &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" /&gt;    &lt;meta name="description" content="" /&gt;    &lt;meta name="author" content="" /&gt;    &lt;link rel="icon" href="https://getbootstrap.com/favicon.ico" /&gt;    &lt;title&gt;登录页面&lt;/title&gt;    &lt;!-- Bootstrap core CSS --&gt;    &lt;link href="#" th:href="@{/css/bootstrap.min.css}" rel="stylesheet" /&gt;    &lt;!-- Custom styles for this template --&gt;    &lt;link href="./login_files/signin.css" th:href="@{/css/signin.css}" rel="stylesheet" /&gt;  &lt;/head&gt;  &lt;body class="text-center"&gt;    &lt;form class="form-signin"&gt;      &lt;img class="mb-4" src="./login_files/bootstrap-solid.svg" th:src="@{/img/bootstrap-solid.svg}" alt="" width="72" height="72" /&gt;      &lt;h1 class="h3 mb-3 font-weight-normal" th:text="#{login.tip}"&gt;Please sign in&lt;/h1&gt;      &lt;label  class="sr-only" th:text="#{login.username}"&gt;Username&lt;/label&gt;      &lt;input type="text"  name="username" class="form-control" placeholder="Username" th:placeholder="#{login.username}" required="" autofocus=""/&gt;      &lt;label for="inputPassword" class="sr-only" th:text="#{login.password}"&gt;Password&lt;/label&gt;      &lt;input type="password" name="password" id="inputPassword" class="form-control" placeholder="Password" th:placeholder="#{login.password}" required="" /&gt;      &lt;div class="checkbox mb-3"&gt;        &lt;label&gt;          &lt;input type="checkbox" value="remember-me" /&gt; [[#{login.remember}]]        &lt;/label&gt;      &lt;/div&gt;      &lt;button class="btn btn-lg btn-primary btn-block" type="submit" th:text="#{login.btn}"&gt;Sign in&lt;/button&gt;      &lt;p class="mt-5 mb-3 text-muted"&gt;© 2017-2018&lt;/p&gt;    &lt;/form&gt;  &lt;/body&gt;&lt;/html&gt;```效果根据浏览器语言的信息切换国际化原理：国际化locale（区域信息对象）；LocaleResolver(获取区域对象)；```java@Bean@ConditionalOnMissingBean@ConditionalOnProperty(prefix = "spring.mvc", name = "locale")public LocaleResolver localeResolver() {    if (this.mvcProperties        .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {        return new FixedLocaleResolver(this.mvcProperties.getLocale());    }    AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();    localeResolver.setDefaultLocale(this.mvcProperties.getLocale());    return localeResolver;}            ```默认的就是根据请求头带来的区域信息获取local国际化信息（截图就是这么犀利）![18.accept-language](E:\工作文档\SpringBoot\images\18.accept-language.jpg)#### 2、点击链接切换国际化自己编写localResolver，加到容器中1、更改HTML代码```html&lt;p class="mt-5 mb-3 text-muted"&gt;© 2017-2018&lt;/p&gt;  &lt;a href="#" class="btn btn-sm" th:href="@{/index.html?lg=zh_CN}"&gt;中文&lt;/a&gt;  &lt;a href="#" class="btn btn-sm" th:href="@{/index.html?lg=en_US}"&gt;English&lt;/a&gt;```2、新建一个MyLocaleResolver.class```javapublic class MyLocaleResolver implements LocaleResolver {    //解析区域信息    @Override    public Locale resolveLocale(HttpServletRequest request) {        String l = request.getParameter("lg");        Locale locale = Locale.getDefault();        if(!StringUtils.isEmpty(l)){            String[] split = l.split("_");            locale = new Locale(split[0], split[1]);        }        return locale;    }    @Override    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {    }}```3、将MyLocaleResolver加入到容器中```java@Beanpublic LocaleResolver localeResolver(){    return new MyLocalResolver();}```4、启动演示### 3、登录拦截器#### 1、登录开发技巧1、清除模板缓存2、Ctrl+F9刷新1、新建一个LoginController```java@Controllerpublic class LoginController {    @PostMapping(value ="/user/login")    public String login(@RequestParam("username")String username,                        @RequestParam("password")String password,                        Map&lt;String,Object&gt; map){        if(!StringUtils.isEmpty(username) &amp;&amp; "123456".equals(password)){            //登录成功            return "list";        }else{            map.put("msg", "用户名密码错误");            return "login";        }    }}```2、登录错误消息显示```html&lt;!--判断--&gt;&lt;p style="color: red" th:text="${msg}" th:if="${not #strings.isEmpty(msg)}"&gt;&lt;/p&gt;```3、表单重复提交表单重复提交事件 --》重定向来到成功页面--》模板引擎解析```javaif(!StringUtils.isEmpty(username) &amp;&amp; "123456".equals(password)){    //登录成功,防止重复提交    return "redirect:/main.html";}else{    map.put("msg", "用户名密码错误");    return "login";}```模板引擎解析```java@Overridepublic void addViewControllers(ViewControllerRegistry registry) {    registry.addViewController("/").setViewName("login");    registry.addViewController("/index.html").setViewName("login");    registry.addViewController("/main.html").setViewName("Dashboard");}```### 4、拦截器作用：实现权限控制，每个页面请求前中后，都会进入到拦截器进行处理（登录权限）1、在component下新建一个LoginHandlerInterceptor拦截器```javapublic class LoginHandlerInterceptor implements HandlerInterceptor {    //目标方法执行之前    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        Object user = request.getSession().getAttribute("loginUser");        if(user!=null){            //已经登录            return true;        }        //未经过验证        request.setAttribute("msg", "没权限请先登录");        request.getRequestDispatcher("/index.html").forward(request, response);        return false;    }    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {    }    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {    }}```2、在MyMvcConfig配置中重写拦截器方法，加入到容器中```java//所有的webMvcConfigurerAdapter组件会一起起作用@Bean //註冊到容器去public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){    WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {        @Override        public void addViewControllers(ViewControllerRegistry registry) {            registry.addViewController("/").setViewName("login");            registry.addViewController("/index.html").setViewName("login");            registry.addViewController("/main.html").setViewName("Dashboard");        }        //注册拦截器        @Override        public void addInterceptors(InterceptorRegistry registry) {            //静态资源 css js img 已经做好了静态资源映射            registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns("/**").                    excludePathPatterns("/index.html","/","/user/login");        }    };    return adapter;}```3、在LoginHandler中添加登录成功写入session```java@Controllerpublic class LoginController {    @PostMapping(value ="/user/login")    public String login(@RequestParam("username")String username,                        @RequestParam("password")String password,                        Map&lt;String,Object&gt; map,                        HttpSession session){        if(!StringUtils.isEmpty(username) &amp;&amp; "123456".equals(password)){            //登录成功,防止重复提交            session.setAttribute("loginUser", username);            return "redirect:/main.html";        }else{            map.put("msg", "用户名密码错误");            return "login";        }    }}```### 5、CRUD-员工列表实验要求：1）、RestfulCRUD：CRUD满足Rest风格URI:/资源名称/资源标识+HTTP操作|      | 普通CRUD                | RestfulCRUD       || ---- | ----------------------- | ----------------- || 查询 | getEmp                  | emp -- GET        || 添加 | addEmp?xxx              | emp --POST        || 修改 | updateEmp?id=xxx&amp;xxx=xx | emp/{id} -- PUT   || 删除 | deleteEmp?id=1          | emp/{id} --DELETE |2、实验的请求架构|                | 请求URI  | 请求方式 || -------------- | -------- | -------- || 查询所有员工   | emps     | GET      || 查询某个员工   | emp/{id} | GET      || 添加页面       | emp      | GET      || 添加员工       | emp      | POST     || 修改页面(回显) | emp/{id} | GET      || 修改员工       | emp/{id} | PUT      || 删除员工       | emp/{id} | DELETE   |3、员工列表#### 1、公共页面抽取使用方法```html1、抽取公共片段&lt;!--footer.html--&gt;&lt;div id="footid" th:fragment="copy"&gt;xxx&lt;/div&gt;2、引入公共片段&lt;!--test.html--&gt;&lt;div th:insert=~{footer::copy}&gt;&lt;/div&gt;~{templatename::selector} 模板名::选择器  footer::#footid~{templatename::fragmentname} 模板名::片段名称 footer::copy行内写法可以加~{xx::xx} 标签体可以 xx::xx```**三种引用方式****th:insert** :加个外层标签 +1**th:replace** :完全替换 1**th:include**：就替换里面的内容 -1公共页面```html&lt;body&gt;...    &lt;div th:insert="footer :: copy"&gt;&lt;/div&gt;    &lt;div th:replace="footer :: copy"&gt;&lt;/div&gt;    &lt;div th:include="footer :: copy"&gt;&lt;/div&gt;&lt;/body&gt;```结果```html&lt;body&gt;...    &lt;!-- th:insert --&gt;    &lt;div&gt;        &lt;footer&gt;            &amp;copy; 2011 The Good Thymes Virtual Grocery        &lt;/footer&gt;    &lt;/div&gt;    &lt;!--th:replace--&gt;    &lt;footer&gt;   &amp;copy; 2011 The Good Thymes Virtual Grocery    &lt;/footer&gt;    &lt;!--th:include--&gt;    &lt;div&gt;        &amp;copy; 2011 The Good Thymes Virtual Grocery    &lt;/div&gt;&lt;/body&gt;```用此种方法将公共页面引入#### 2、列表高亮引入片段的时候传入参数，新建一个commons文件夹存储公共页面bar.html模板引入变量名dashboard```html&lt;a class="nav-link active"   th:class="${activeUri}=='main.html'?'nav-link active':'nav-link'"   href="https://getbootstrap.com/docs/4.1/examples/dashboard/#" th:href="@{/main.html}"&gt;    &lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-home"&gt;&lt;path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"&gt;&lt;/path&gt;&lt;polyline points="9 22 9 12 15 12 15 22"&gt;&lt;/polyline&gt;&lt;/svg&gt;    Dashboard &lt;span class="sr-only"&gt;(current)&lt;/span&gt;&lt;/a&gt;```员工管理```html&lt;li class="nav-item"&gt;    &lt;a class="nav-link"       th:class="${activeUri}=='emps'?'nav-link active':'nav-link'"       href="https://getbootstrap.com/docs/4.1/examples/dashboard/#" th:href="@{/emps}"&gt;        &lt;svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-users"&gt;&lt;path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"&gt;&lt;/path&gt;&lt;circle cx="9" cy="7" r="4"&gt;&lt;/circle&gt;&lt;path d="M23 21v-2a4 4 0 0 0-3-3.87"&gt;&lt;/path&gt;&lt;path d="M16 3.13a4 4 0 0 1 0 7.75"&gt;&lt;/path&gt;&lt;/svg&gt;        员工管理    &lt;/a&gt;```引入模板的时候传入参数dashboard.html引入```html&lt;!--引入侧边栏--&gt;   &lt;div th:replace="commons/bar :: sidebar(activeUri='main.html')"&gt;&lt;/div&gt;```list.html引入```html&lt;!--引入侧边栏--&gt;&lt;div th:replace="commons/bar::sidebar(activeUri='emps')"&gt;&lt;/div&gt;```### 6、列表数据显示（查）#### 1、传入员工对象EmployeeController类,传入员工对象```java@Controllerpublic class EmployeeController {    @Autowired    EmployeeDao employeeDao;    /**     * 查询所有员工返回列表页面     */    @GetMapping(value = "/emps")    public String list(Model model){        Collection&lt;Employee&gt; employees = employeeDao.getAll();        model.addAttribute("emps",employees);        return "emp/list";    }}```#### 2、 遍历对象list.html中 使用模板的 `th:each`方法```htmltable class="table table-striped table-sm"&gt;    &lt;thead&gt;    &lt;tr&gt;        &lt;th&gt;#&lt;/th&gt;        &lt;th&gt;lastName&lt;/th&gt;        &lt;th&gt;email&lt;/th&gt;        &lt;th&gt;gender&lt;/th&gt;        &lt;th&gt;department&lt;/th&gt;        &lt;th&gt;birth&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;    &lt;/tr&gt;    &lt;/thead&gt;    &lt;tbody&gt;        &lt;tr th:each="emp:${emps}"&gt;            &lt;td th:text="${emp.id}"&gt;1&lt;/td&gt;            &lt;td th:text="${emp.lastName}"&gt;1&lt;/td&gt;            &lt;td th:text="${emp.email}"&gt;1&lt;/td&gt;            &lt;td th:text="${emp.gender}"&gt;1&lt;/td&gt;            &lt;td th:text="${emp.department.departmentName}"&gt;1&lt;/td&gt;            &lt;td th:text="${#dates.format(emp.birth,'yyyy-MM-dd HH:mm:ss')}"&gt;1&lt;/td&gt;            &lt;td&gt;                &lt;button class="btn btn-sm btn-primary"&gt;编辑&lt;/button&gt;                &lt;button class="btn btn-sm btn-danger"&gt;删除&lt;/button&gt;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/tbody&gt;&lt;/table&gt;```#### 3、效果显示![19.table list](E:\工作文档\SpringBoot\images\19.table list.jpg)### 7、员工添加（增）功能：点击添加按钮，出现新增页面#### 1、新增页面```html&lt;form&gt;    &lt;!-- LastName --&gt;    &lt;div class="form-group"&gt;        &lt;label for="LastName"&gt;LastName&lt;/label&gt;        &lt;input type="text" class="form-control" id="LastName"  placeholder="LastName"&gt;    &lt;/div&gt;    &lt;!-- Email --&gt;    &lt;div class="form-group"&gt;        &lt;label for="Email"&gt;Email&lt;/label&gt;        &lt;input type="email" class="form-control" id="Email"  placeholder="zhangsan@163.com"&gt;    &lt;/div&gt;    &lt;!--gender--&gt;    &lt;div class="form-group"&gt;        &lt;label &gt;Gender&lt;/label&gt;&lt;br/&gt;        &lt;div class="form-check form-check-inline"&gt;            &lt;input class="form-check-input" type="radio" name="gender" value="1"&gt;            &lt;label class="form-check-label" &gt;男&lt;/label&gt;        &lt;/div&gt;        &lt;div class="form-check form-check-inline"&gt;            &lt;input class="form-check-input" type="radio" name="gender" value="0"&gt;            &lt;label class="form-check-label" &gt;女&lt;/label&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!-- department --&gt;    &lt;div class="form-group"&gt;        &lt;label for="exampleFormControlSelect1"&gt;department&lt;/label&gt;        &lt;select class="form-control" id="exampleFormControlSelect1"&gt;            &lt;option th:each="dept:${depts}" th:value="${dept.id}" th:text="${dept.departmentName}"&gt;&lt;/option&gt;        &lt;/select&gt;    &lt;/div&gt;    &lt;!--Birth--&gt;    &lt;div class="form-group"&gt;        &lt;label for="birthDate"&gt;Birth&lt;/label&gt;        &lt;input type="text" class="form-control" id="birthDate" placeholder="2012-12-12"&gt;    &lt;/div&gt;    &lt;button type="submit" class="btn btn-primary"&gt;添 加&lt;/button&gt;&lt;/form&gt;```#### 2、页面跳转在EmployeeController中添加addEmpPage方法```java/** * 添加员工 */@GetMapping(value = "/emp")public String toAddPage(Model model){    //来到添加页面,查出所有部门显示    Collection&lt;Department&gt; depts = departmentDao.getDepartments();    model.addAttribute("depts",depts);    return "emp/add";}```关键点：在添加部门页面要遍历部门信息，所以在方法中出入部门信息#### 3、添加功能完成新建一个PostMapping&gt; ThymeleafViewResolver 查看redirect和forward,原生的sendredirect方法；1、新建一个postMapping的方法用来接受页面的添加POST请求```java/** * 员工添加 */@PostMapping(value = "/emp")public String addEmp(Employee employee){    employeeDao.save(employee);    //来到员工列表页面、redirect:重定向到一个地址，forward转发到一个地址    return "redirect:/emps";}```2、修改添加页面，添加name属性```html&lt;form th:action="@{/emp}" method="post"&gt;    &lt;!-- LastName --&gt;    &lt;div class="form-group"&gt;        &lt;label for="LastName"&gt;LastName&lt;/label&gt;        &lt;input type="text" class="form-control" id="LastName" name="lastName" placeholder="LastName"&gt;    &lt;/div&gt;    &lt;!-- Email --&gt;    &lt;div class="form-group"&gt;        &lt;label for="Email"&gt;Email&lt;/label&gt;        &lt;input type="email" class="form-control" id="Email"  name="email" placeholder="zhangsan@163.com"&gt;    &lt;/div&gt;    &lt;!--gender--&gt;    &lt;div class="form-group"&gt;        &lt;label &gt;Gender&lt;/label&gt;&lt;br/&gt;        &lt;div class="form-check form-check-inline"&gt;            &lt;input class="form-check-input" type="radio" name="gender" value="1"&gt;            &lt;label class="form-check-label" &gt;男&lt;/label&gt;        &lt;/div&gt;        &lt;div class="form-check form-check-inline"&gt;            &lt;input class="form-check-input" type="radio" name="gender" value="0"&gt;            &lt;label class="form-check-label" &gt;女&lt;/label&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!-- department --&gt;    &lt;div class="form-group"&gt;        &lt;label &gt;department&lt;/label&gt;        &lt;select class="form-control"  name="department.id"&gt;            &lt;option th:each="dept:${depts}" th:value="${dept.id}" th:text="${dept.departmentName}"&gt;&lt;/option&gt;        &lt;/select&gt;    &lt;/div&gt;    &lt;div class="form-group"&gt;        &lt;label for="birthDate"&gt;Birth&lt;/label&gt;        &lt;input type="text" class="form-control" id="birthDate" placeholder="2012-12-12" name="birth"&gt;    &lt;/div&gt;    &lt;button type="submit" class="btn btn-primary"&gt;添 加&lt;/button&gt;&lt;/form&gt;```1、部门对象问题？```html&lt;select class="form-control"  name="department.id"&gt;```2、日期格式化？属性中添加 date-formate 默认是 / ```java@Bean@ConditionalOnProperty(prefix = "spring.mvc", name = "date-format")public Formatter&lt;Date&gt; dateFormatter() {   return new DateFormatter(this.mvcProperties.getDateFormat());}@Overridepublic MessageCodesResolver getMessageCodesResolver() {   if (this.mvcProperties.getMessageCodesResolverFormat() != null) {      DefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver();      resolver.setMessageCodeFormatter(            this.mvcProperties.getMessageCodesResolverFormat());      return resolver;   }   return null;}``````propertiesspring.mvc.date-format=yyyy-MM-dd```### 8、员工编辑（改）思路使用add页面，并且数据回显，然后区分添加，PUT请求#### 1、修改按钮在list.html的`编辑`按钮加上链接```html&lt;td&gt;    &lt;a  href="#" th:href="@{/emp/}+${emp.id}" class="btn btn-sm btn-primary"&gt;编辑&lt;/a&gt;    &lt;button class="btn btn-sm btn-danger"&gt;删除&lt;/button&gt;&lt;/td&gt;```#### 2、编写跳转页面跳转到员工编辑页面的Controller```java/** * 员工编辑页面 */@GetMapping(value = "/emp/{id}")public String toEditPage(@PathVariable("id") Integer id ,Model model){    Employee emp = employeeDao.getEmpById(id);    Collection&lt;Department&gt; departments = departmentDao.getDepartments();    model.addAttribute("emp",emp);    model.addAttribute("depts",departments);    return "emp/add";}   ```#### 3、对页面修改对add页面进行修改1）、添加回显2）、添加判断是否emp!=null（区分add or edit）3）、添加put请求 --两个input的hidden标签```html &lt;form th:action="@{/emp}" method="post"&gt;        &lt;!--发送put请求--&gt;        &lt;!--1.SpringMVC配置HiddenHttpMethodFilter            2.页面创建一个post表单            3.创建一个 input name_method 值就是我们请求的方式--&gt;        &lt;input type="hidden" name="_method" value="put" th:if="${emp!=null}"&gt;        &lt;input type="hidden" name="id" th:value="${emp.id}" th:if="${emp!=null}"&gt;        &lt;!-- LastName --&gt;        &lt;div class="form-group"&gt;            &lt;label for="LastName"&gt;LastName&lt;/label&gt;            &lt;input type="text" class="form-control" id="LastName" name="lastName" placeholder="LastName" th:value="${emp!=null}?${emp.lastName}"&gt;        &lt;/div&gt;        &lt;!-- Email --&gt;        &lt;div class="form-group"&gt;            &lt;label for="Email"&gt;Email&lt;/label&gt;            &lt;input type="email" class="form-control" id="Email"  name="email" placeholder="zhangsan@163.com" th:value="${emp!=null}?${emp.email}"&gt;        &lt;/div&gt;        &lt;!--gender--&gt;        &lt;div class="form-group"&gt;            &lt;label &gt;Gender&lt;/label&gt;&lt;br/&gt;            &lt;div class="form-check form-check-inline"&gt;                &lt;input class="form-check-input" type="radio" name="gender" value="1" th:checked="${emp!=null}?${emp.gender}==1"&gt;                &lt;label class="form-check-label" &gt;男&lt;/label&gt;            &lt;/div&gt;            &lt;div class="form-check form-check-inline"&gt;                &lt;input class="form-check-input" type="radio" name="gender" value="0" th:checked="${emp!=null}?${emp.gender}==0"&gt;                &lt;label class="form-check-label" &gt;女&lt;/label&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;!-- department --&gt;        &lt;div class="form-group"&gt;            &lt;label &gt;department&lt;/label&gt;            &lt;select class="form-control"  name="department.id" &gt;                &lt;option th:selected="${emp!=null}?${dept.id == emp.department.id}" th:each="dept:${depts}" th:value="${dept.id}" th:text="${dept.departmentName}"&gt;&lt;/option&gt;            &lt;/select&gt;        &lt;/div&gt;        &lt;div class="form-group"&gt;            &lt;label for="birthDate"&gt;Birth&lt;/label&gt;            &lt;input type="text" class="form-control" id="birthDate" placeholder="2012-12-12" name="birth" th:value="${emp!=null}?${#dates.format(emp.birth,'yyyy-MM-dd HH:mm:ss')}"&gt;        &lt;/div&gt;        &lt;button type="submit" class="btn btn-primary" th:text="${emp!=null}?'修改':'添加'"&gt;添 加&lt;/button&gt;    &lt;/form&gt;&lt;/main&gt;```### 9、员工删除（删）#### 1、新建Contoller```java/** * 员工删除 */@DeleteMapping(value = "/emp/{id}")public String deleteEmp(@PathVariable("id") Integer id){    employeeDao.deleteEmpById(id);    return "redirect:/emps";}```#### 2、修改删除标签```html&lt;button th:attr="del_uri=@{/emp/}+${emp.id}"  class="btn btn-sm btn-danger deleteBtn"&gt;    删除&lt;/button&gt;```#### 3、写Form表单form表单卸载外面，input 中 name="_method" value="delete" 模拟delete请求```html                &lt;/tbody&gt;            &lt;/table&gt;        &lt;/div&gt;    &lt;/main&gt;    &lt;form id="deleteEmpForm" method="post"&gt;        &lt;input type="hidden" name="_method" value="delete"&gt;    &lt;/form&gt;&lt;/div&gt;```#### 4、写JS提交```javascript&lt;script&gt;    $(".deleteBtn").click(function () {        $("#deleteEmpForm").attr("action",$(this).attr("del_uri")).submit();        return false;    })&lt;/script&gt;```&gt; return false;禁用btn提交效果## 7、错误机制的处理### 1、默认的错误处理机制默认错误页面![20.error](E:\工作文档\SpringBoot\images\20.error.jpg)原理参照ErrorMvcAutoConfiguration:错误处理的自动配置```org\springframework\boot\spring-boot-autoconfigure\1.5.12.RELEASE\spring-boot-autoconfigure-1.5.12.RELEASE.jar!\org\springframework\boot\autoconfigure\web\ErrorMvcAutoConfiguration.class```- DefaultErrorAttributes  帮我们在页面共享信息  ```java  @Override  public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes,        boolean includeStackTrace) {     Map&lt;String, Object&gt; errorAttributes = new LinkedHashMap&lt;String, Object&gt;();     errorAttributes.put("timestamp", new Date());     addStatus(errorAttributes, requestAttributes);     addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);     addPath(errorAttributes, requestAttributes);     return errorAttributes;  }  ```- BasicErrorController  ```java  @Controller  @RequestMapping("${server.error.path:${error.path:/error}}")  public class BasicErrorController extends AbstractErrorController {      //产生HTML数据      @RequestMapping(produces = "text/html")  public ModelAndView errorHtml(HttpServletRequest request,  HttpServletResponse response) {  HttpStatus status = getStatus(request);  Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(  request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));  response.setStatus(status.value());  ModelAndView modelAndView = resolveErrorView(request, response, status, model);  return (modelAndView == null ? new ModelAndView("error", model) : modelAndView);  }  //产生Json数据  @RequestMapping  @ResponseBody  public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) {  Map&lt;String, Object&gt; body = getErrorAttributes(request,  isIncludeStackTrace(request, MediaType.ALL));  HttpStatus status = getStatus(request);  return new ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);  }  ```- ErrorPageCustomizer  ```java  @Value("${error.path:/error}")  private String path = "/error";//系统出现错误以后来到error请求进行处理，(web.xml)  ```- DefaultErrorViewResolver  ```java  @Override  public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,        Map&lt;String, Object&gt; model) {     ModelAndView modelAndView = resolve(String.valueOf(status), model);     if (modelAndView == null &amp;&amp; SERIES_VIEWS.containsKey(status.series())) {        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);     }     return modelAndView;  }    private ModelAndView resolve(String viewName, Map&lt;String, Object&gt; model) {      //默认SpringBoot可以找到一个页面？error/状态码     String errorViewName = "error/" + viewName;      //如果模板引擎可以解析地址，就返回模板引擎解析     TemplateAvailabilityProvider provider = this.templateAvailabilityProviders           .getProvider(errorViewName, this.applicationContext);     if (provider != null) {         //有模板引擎就返回到errorViewName指定的视图地址        return new ModelAndView(errorViewName, model);     }      //自己的文件 就在静态文件夹下找静态文件 /静态资源文件夹/404.html     return resolveResource(errorViewName, model);  }  ```一旦系统出现4xx或者5xx错误 ErrorPageCustomizer就回来定制错误的响应规则,就会来到 /error请求,BasicErrorController处理，就是一个Controller1.响应页面,去哪个页面是由 DefaultErrorViewResolver 拿到所有的错误视图```javaprotected ModelAndView resolveErrorView(HttpServletRequest request,      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model) {   for (ErrorViewResolver resolver : this.errorViewResolvers) {      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);      if (modelAndView != null) {         return modelAndView;      }   }   return null;}```l浏览器发送请求 accpt:text/html客户端请求：accept:/*### 2、如何定制错误响应1）、如何定制错误的页面1.有模板引擎：静态资源/404.html,什么错误什么页面；所有以4开头的 4xx.html 5开头的5xx.html有精确的404和4xx优先选择404页面获得的数据timestamp：时间戳status：状态码error：错误提示exception：异常对象message：异常信息errors:JSR303有关2.没有放在模板引擎，放在静态文件夹，也可以显示，就是没法使用模板取值3.没有放模板引擎，没放静态，会显示默认的错误2）、如何定义错误的数据举例子：新建4xx和5xx文件![21.error-static](E:\工作文档\SpringBoot\images\21.error-static.jpg)```html&lt;body &gt;    &lt;p&gt;status: [[${status}]]&lt;/p&gt;    &lt;p&gt;timestamp: [[${timestamp}]]&lt;/p&gt;    &lt;p&gt;error: [[${error}]]&lt;/p&gt;    &lt;p&gt;message: [[${message}]]&lt;/p&gt;    &lt;p&gt;exception: [[${exception}]]&lt;/p&gt;&lt;/body&gt;```![22.4xxhtml](E:\工作文档\SpringBoot\images\22.4xxhtml.jpg)### 3、如何定制Json数据#### 1、仅发送json数据```javapublic class UserNotExitsException extends  RuntimeException {    public UserNotExitsException(){        super("用户不存在");    }}``````java/** * 异常处理器 */@ControllerAdvicepublic class MyExceptionHandler {    @ResponseBody    @ExceptionHandler(UserNotExitsException.class)    public Map&lt;String ,Object&gt; handlerException(Exception e){        Map&lt;String ,Object&gt; map =new HashMap&lt;&gt;();        map.put("code", "user not exist");        map.put("message", e.getMessage());        return map;    }}```无法自适应 都是返回的json数据#### 2、转发到error自适应处理```java@ExceptionHandler(UserNotExitsException.class)public String handlerException(Exception e, HttpServletRequest request){    Map&lt;String ,Object&gt; map =new HashMap&lt;&gt;();    //传入自己的状态码    request.setAttribute("javax.servlet.error.status_code", 432);    map.put("code", "user not exist");    map.put("message", e.getMessage());    //转发到error    return "forward:/error";}```程序默认获取状态码```javaprotected HttpStatus getStatus(HttpServletRequest request) {   Integer statusCode = (Integer) request         .getAttribute("javax.servlet.error.status_code");   if (statusCode == null) {      return HttpStatus.INTERNAL_SERVER_ERROR;   }   try {      return HttpStatus.valueOf(statusCode);   }   catch (Exception ex) {      return HttpStatus.INTERNAL_SERVER_ERROR;   }```没有自己写的自定义异常数据#### 3、自适应和定制数据传入Spring 默认的原理，出现错误后回来到error请求，会被BasicErrorController处理,响应出去的数据是由BasicErrorController的父类AbstractErrorController(ErrorController)规定的方法getAttributes得到的；1、编写一个ErrorController的实现类【或者AbstractErrorController的子类】，放在容器中；2、页面上能用的数据，或者是json数据返回能用的数据都是通过errorAttributes.getErrorAttributes得到；容器中的DefaultErrorAtrributes.getErrorAtrributees();默认进行数据处理```javapublic class MyErrorAttributes extends DefaultErrorAttributes {    @Override    public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {        Map&lt;String, Object&gt; map = super.getErrorAttributes(requestAttributes, includeStackTrace);        map.put("company", "wdjr");        return map;    }}```异常处理：把map方法请求域中```java    @ExceptionHandler(UserNotExitsException.class)    public String handlerException(Exception e, HttpServletRequest request){        Map&lt;String ,Object&gt; map =new HashMap&lt;&gt;();        //传入自己的状态码        request.setAttribute("javax.servlet.error.status_code", 432);        map.put("code", "user not exist");        map.put("message", e.getMessage());        request.setAttribute("ext", map);        //转发到error        return "forward:/error";    }}```在上面的MyErrorAttributes类中加上```java//我们的异常处理器Map&lt;String,Object&gt; ext = (Map&lt;String, Object&gt;) requestAttributes.getAttribute("ext", 0);map.put("ext", ext);```## 8、配置嵌入式servlet容器### 1、定制和修改Servlet容器SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；![23.tomcat emd](E:\工作文档\SpringBoot\images\23.tomcat emd.jpg)问题？1）、如何定制和修改Servlet容器；1、 修改Server相关的配置文件 application.properties```properties#通用的servlet容器配置server.xxx#tomcat的配置server.tomcat.xxxx```2、编写一个EmbeddedServletContainerCustomizer;嵌入式的Servlet容器的定制器；来修改Servlet的容器配置```java@Beanpublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){    return new EmbeddedServletContainerCustomizer() {        //定制嵌入式Servlet的容器相关规则        @Override        public void customize(ConfigurableEmbeddedServletContainer container) {            container.setPort(8999);        }    };}```其实同理，都是实现EmbeddedServletContainerCustomizer### 2、注册Servlet三大组件三大组件 Servlet Filter Listener由于SprringBoot默认是以jar包启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml注册三大组件#### ServletRegistrationBean```java@Beanpublic ServletRegistrationBean myServlet(){    ServletRegistrationBean servletRegistrationBean = new ServletRegistrationBean(new MyServlet(),"/servlet");    return servletRegistrationBean;}```MyServlet```javapublic class MyServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        resp.getWriter().write("Hello Servlet");    }}```#### FilterRegistrationBean```java@Beanpublic FilterRegistrationBean myFilter(){    FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();    filterRegistrationBean.setFilter(new MyFilter());    filterRegistrationBean.setUrlPatterns(Arrays.asList("/hello","/myServlet"));    return filterRegistrationBean;}```MyFilter```javapublic class MyFilter implements Filter {    @Override    public void init(FilterConfig filterConfig) throws ServletException {    }    @Override    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {        System.out.println("MyFilter process");        chain.doFilter(request, response);    }    @Override    public void destroy() {    }}```#### ServletListenerRegistrationBean```java@Beanpublic ServletListenerRegistrationBean myListener(){    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = new ServletListenerRegistrationBean&lt;&gt;(new MyListener());    return registrationBean;}```MyListener```javapublic class MyListener implements ServletContextListener {    @Override    public void contextInitialized(ServletContextEvent sce) {        System.out.println(".........web应用启动..........");    }    @Override    public void contextDestroyed(ServletContextEvent sce) {        System.out.println(".........web应用销毁..........");    }}```SpringBoot帮助我们自动配置SpringMVC的时候，自动注册SpringMVC的前端控制器；DispatcherServlet;```java@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)   public ServletRegistrationBean dispatcherServletRegistration(         DispatcherServlet dispatcherServlet) {      ServletRegistrationBean registration = new ServletRegistrationBean(            dispatcherServlet, this.serverProperties.getServletMapping());       //默认拦截 /所有请求 包括静态资源 不包括jsp       //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径      registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);      registration.setLoadOnStartup(            this.webMvcProperties.getServlet().getLoadOnStartup());      if (this.multipartConfig != null) {         registration.setMultipartConfig(this.multipartConfig);      }      return registration;   }}```### 3、切换其他的Servlet容器在ServerProperties中```javaprivate final Tomcat tomcat = new Tomcat();private final Jetty jetty = new Jetty();private final Undertow undertow = new Undertow();```tomcat(默认支持)jetty（长连接）undertow（多并发）切换容器 仅仅需要修改pom文件的依赖就可以```xml        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;        &lt;/dependency&gt;&lt;!--        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;        &lt;/dependency&gt;--&gt;```### 4、嵌入式Servlet容器自动配置原理```java@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)@Configuration@ConditionalOnWebApplication@Import(BeanPostProcessorsRegistrar.class)//给容器导入组件 后置处理器 在Bean初始化前后执行前置后置的逻辑 创建完对象还没属性赋值进行初始化工作public class EmbeddedServletContainerAutoConfiguration {    @Configuration@ConditionalOnClass({ Servlet.class, Tomcat.class })//当前是否引入tomcat依赖    //判断当前容器没有用户自定义EmbeddedServletContainerFactory，就会创建默认的嵌入式容器@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)public static class EmbeddedTomcat {@Beanpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {return new TomcatEmbeddedServletContainerFactory();}```1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）```javapublic interface EmbeddedServletContainerFactory {//获取嵌入式的Servlet容器   EmbeddedServletContainer getEmbeddedServletContainer(         ServletContextInitializer... initializers);}```继承关系![24.EmdServletFactory](E:\工作文档\SpringBoot\images\24.EmdServletFactory.jpg)2）、EmbeddedServletContainer:(嵌入式的Servlet容器)![25.EmdServletContainer](E:\工作文档\SpringBoot\images\25.EmdServletContainer.jpg)3）、TomcatEmbeddedServletContainerFactory为例 ```java@Overridepublic EmbeddedServletContainer getEmbeddedServletContainer(      ServletContextInitializer... initializers) {   Tomcat tomcat = new Tomcat();    //配置tomcat的基本环节   File baseDir = (this.baseDirectory != null ? this.baseDirectory         : createTempDir("tomcat"));   tomcat.setBaseDir(baseDir.getAbsolutePath());   Connector connector = new Connector(this.protocol);   tomcat.getService().addConnector(connector);   customizeConnector(connector);   tomcat.setConnector(connector);   tomcat.getHost().setAutoDeploy(false);   configureEngine(tomcat.getEngine());   for (Connector additionalConnector : this.additionalTomcatConnectors) {      tomcat.getService().addConnector(additionalConnector);   }   prepareContext(tomcat.getHost(), initializers);    //将配置好的tomcat传入进去；并且启动tomcat容器   return getTomcatEmbeddedServletContainer(tomcat);}```4）、嵌入式配置修改```ServerProperties、EmbeddedServletContainerCustomizer```EmbeddedServletContainerCustomizer:定制器帮我们修改了Servlet容器配置？怎么修改？5）、容器中导入了**EmbeddedServletContainerCustomizerBeanPostProcessor**```java@Overridepublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,      BeanDefinitionRegistry registry) {   if (this.beanFactory == null) {      return;   }   registerSyntheticBeanIfMissing(registry,         "embeddedServletContainerCustomizerBeanPostProcessor",         EmbeddedServletContainerCustomizerBeanPostProcessor.class);   registerSyntheticBeanIfMissing(registry,         "errorPageRegistrarBeanPostProcessor",         ErrorPageRegistrarBeanPostProcessor.class);}``````java@Overridepublic Object postProcessBeforeInitialization(Object bean, String beanName)      throws BeansException {    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer   if (bean instanceof ConfigurableEmbeddedServletContainer) {      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);   }   return bean;}private void postProcessBeforeInitialization(    ConfigurableEmbeddedServletContainer bean) {    //获取所有的定制器，调用每个定制器的customer方法给Servlet容器进行赋值    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) {        customizer.customize(bean);    }}private Collection&lt;EmbeddedServletContainerCustomizer&gt; getCustomizers() {    if (this.customizers == null) {        // Look up does not include the parent context        this.customizers = new ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(            this.beanFactory            //从容器中获取所有的这个类型的组件：EmbeddedServletContainerCustomizer            //定制Servlet,给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件            .getBeansOfType(EmbeddedServletContainerCustomizer.class,                            false, false)            .values());        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);        this.customizers = Collections.unmodifiableList(this.customizers);    }    return this.customizers;}```ServerProperties也是EmbeddedServletContainerCustomizer定制器步骤：1）、SpringBoot根据导入的依赖情况，给容器中添加响应的容器工厂 例：tomcatEmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】2）、容器中某个组件要创建对象就要通过后置处理器；```javaEmbeddedServletContainerCustomizerBeanPostProcessor```只要是嵌入式的Servlet容器工厂，后置处理器就工作；3）、后置处理器，从容器中获取的所有的EmbeddedServletContainerCustomizer，调用定制器的定制方法### 5、嵌入式Servlet容器启动原理什么时候创建嵌入式的Servlet的容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat;获取嵌入式的容器工厂1）、SpringBoot应用启动Run方法2）、刷新IOC容器对象【创建IOC容器对象，并初始化容器，创建容器的每一个组件】；如果是web环境AnnotationConfigEmbeddedWebApplicationContext,如果不是AnnotationConfigApplicationContext```JAVAif (contextClass == null) {   try {      contextClass = Class.forName(this.webEnvironment            ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);   }```3）、refresh(context);刷新创建好的IOC容器```javatry {   // Allows post-processing of the bean factory in context subclasses.   postProcessBeanFactory(beanFactory);   // Invoke factory processors registered as beans in the context.   invokeBeanFactoryPostProcessors(beanFactory);   // Register bean processors that intercept bean creation.   registerBeanPostProcessors(beanFactory);   // Initialize message source for this context.   initMessageSource();   // Initialize event multicaster for this context.   initApplicationEventMulticaster();   // Initialize other special beans in specific context subclasses.   onRefresh();   // Check for listener beans and register them.   registerListeners();   // Instantiate all remaining (non-lazy-init) singletons.   finishBeanFactoryInitialization(beanFactory);   // Last step: publish corresponding event.   finishRefresh();}```4）、 onRefresh();web的ioc容器重写了onRefresh方法5）、webioc会创建嵌入式的Servlet容器；createEmbeddedServletContainer6）、获取嵌入式的Servlet容器工厂；```javaEmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();```从ioc容器中获取EmbeddedServletContainerFactory组件；```java@Beanpublic TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {return new TomcatEmbeddedServletContainerFactory();}```TomcatEmbeddedServletContainerFactory创建对象，后置处理器看这个对象，就来获取所有的定制器来定制Servlet容器的相关配置；7）、使用容器工厂获取嵌入式的Servlet容器8）、嵌入式的Servlet容器创建对象并启动Servlet容器；先启动嵌入式的Servlet容器，在将ioc容器中剩下的没有创建出的对象获取出来ioc启动创建Servlet容器## 9、使用外置的Servlet容器嵌入式的Servlet容器：应用达成jar包优点：简单、便携缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义定制器】，自己来编写嵌入式的容器工厂）外置的Servlet容器：外面安装Tomcat是以war包的方式打包。### 1、IDEA操作外部Servlet1、创建程序为war程序![26.tomcat1](E:\工作文档\SpringBoot\images\26.tomcat1.jpg)2、选择版本![27.tomcat2](E:\工作文档\SpringBoot\images\27.tomcat2.jpg)3、添加tomcat![28.tomcat3](E:\工作文档\SpringBoot\images\28.tomcat3.jpg)4、选择tomcat![30.tomcat4](E:\工作文档\SpringBoot\images\30.tomcat4.jpg)5、选择本地的Tomcat![31.tomcat5](E:\工作文档\SpringBoot\images\31.tomcat5.jpg)6、配置tomcat路径![32.tomcat6](E:\工作文档\SpringBoot\images\32.tomcat6.jpg)7、添加服务器![33.tomcat7](E:\工作文档\SpringBoot\images\33.tomcat7.jpg)8、添加exploded的war配置，应用OK tomcat配置完成![34.tomcat8](E:\工作文档\SpringBoot\images\34.tomcat8.jpg)二、配置webapp文件夹1、点击配置![35.tomcat9](E:\工作文档\SpringBoot\images\35.tomcat9.jpg)2、添加webapp目录![36.tomcat10](E:\工作文档\SpringBoot\images\36.tomcat10.jpg)3、默认配置就可以![37.tomcat11](E:\工作文档\SpringBoot\images\37.tomcat11.jpg)4、配置web.xml文件![38.tomcat12](E:\工作文档\SpringBoot\images\38.tomcat12.jpg)5、文档目录结构![39.tomcat13](E:\工作文档\SpringBoot\images\39.tomcat13.jpg)### 2、运行一个示例1、项目目录![40.demo1](E:\工作文档\SpringBoot\images\40.demo1.jpg)2、配置文件写视图解析前后缀```propertiesspring.mvc.view.prefix=/WEB-INF/jsp/spring.mvc.view.suffix=.jsp```3、HelloController```java@Controllerpublic class HelloController {    @GetMapping("/hello")    public String hello(Model model){        model.addAttribute("message","这是Controller传过来的message");        return "success";    }}```4、success.jsp```jsp&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Success&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Success&lt;/h1&gt;message:${message}&lt;/body&gt;&lt;/html&gt;```5、运行结果![41.demo2](E:\工作文档\SpringBoot\images\41.demo2.jpg)步骤1、必须创建一个war项目；2、将嵌入式的Tomcat指定为provided```xml&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;    &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;```3、必须编写一个SpringBootServletInitializer的子类，并调用configure方法里面的固定写法```javapublic class ServletInitializer extends SpringBootServletInitializer {    @Override    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {        //传入SpringBoot的主程序，        return application.sources(SpringBoot04WebJspApplication.class);    }}```4、启动服务器就可以；### 3、原理jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet的容器；war包：启动服务器，服务器启动SpringBoot应用，【SpringBootServletInitializer】启动ioc容器servlet3.0规范 8.2.4 共享库和运行时插件规则：1、服务器启动（web应用启动），会创建当前的web应用里面每一个jar包里面ServletContrainerInitializer的实现类的实例2、SpringBootServletInitializer这个类的实现需要放在jar包下的META-INF/services文件夹下，有一个命名为javax.servlet.ServletContainerInitalizer的文件，内容就是ServletContainerInitializer的实现类全类名3、还可以使用@HandlerTypes注解，在应用启动的时候可以启动我们感兴趣的类流程：1、启动Tomcat服务器2、spring web模块里有这个文件![42.servletContainerInit](E:\工作文档\SpringBoot\images\42.servletContainerInit.jpg)```javaorg.springframework.web.SpringServletContainerInitializer```3、SpringServletContainerInitializer将handlerTypes标注的所有类型的类传入到onStartip方法的Set&lt;Class&lt;?&gt;&gt;;为这些感兴趣类创建实例4、每个创建好的WebApplicationInitializer调用自己的onStratup5、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法6、SpringBootServletInitializer执行onStartup方法会创建createRootApplicationContext```javaprotected WebApplicationContext createRootApplicationContext(ServletContext servletContext) {    SpringApplicationBuilder builder = this.createSpringApplicationBuilder();    //环境构建器    StandardServletEnvironment environment = new StandardServletEnvironment();    environment.initPropertySources(servletContext, (ServletConfig)null);    builder.environment(environment);    builder.main(this.getClass());    ApplicationContext parent = this.getExistingRootWebApplicationContext(servletContext);    if (parent != null) {        this.logger.info("Root context already created (using as parent).");        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)null);        builder.initializers(new ApplicationContextInitializer[]{new ParentContextApplicationContextInitializer(parent)});    }    builder.initializers(new ApplicationContextInitializer[]{new ServletContextApplicationContextInitializer(servletContext)});    builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);    //调用Configure,子类重写了这个方法，将SpringBoot的主程序类传入进来    builder = this.configure(builder);    //创建一个spring应用    SpringApplication application = builder.build();    if (application.getSources().isEmpty() &amp;&amp; AnnotationUtils.findAnnotation(this.getClass(), Configuration.class) != null) {        application.getSources().add(this.getClass());    }    Assert.state(!application.getSources().isEmpty(), "No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation");    if (this.registerErrorPageFilter) {        application.getSources().add(ErrorPageFilterConfiguration.class);    }//最后启动Spring容器    return this.run(application);}```7、Spring的应用就启动完了并且创建IOC容器；```javapublic ConfigurableApplicationContext run(String... args) {   StopWatch stopWatch = new StopWatch();   stopWatch.start();   ConfigurableApplicationContext context = null;   FailureAnalyzers analyzers = null;   configureHeadlessProperty();   SpringApplicationRunListeners listeners = getRunListeners(args);   listeners.starting();   try {      ApplicationArguments applicationArguments = new DefaultApplicationArguments(            args);      ConfigurableEnvironment environment = prepareEnvironment(listeners,            applicationArguments);      Banner printedBanner = printBanner(environment);      context = createApplicationContext();      analyzers = new FailureAnalyzers(context);      prepareContext(context, environment, listeners, applicationArguments,            printedBanner);      refreshContext(context);      afterRefresh(context, applicationArguments);      listeners.finished(context, null);      stopWatch.stop();      if (this.logStartupInfo) {         new StartupInfoLogger(this.mainApplicationClass)               .logStarted(getApplicationLog(), stopWatch);      }      return context;   }   catch (Throwable ex) {      handleRunFailure(context, listeners, analyzers, ex);      throw new IllegalStateException(ex);   }}```# 五、Docker## 1、简介Docker是一个开源的应用容器引擎将软件编译成一个镜像；然后在镜像里各种软件做好配置，将镜像发布出去，其他的使用这就可以直接使用这个镜像。运行中的这个镜像叫做容器，容器启动速度快，类似ghost操作系统，安装好了什么都有了；## 2、Docker的核心概念docker主机（HOST）:安装了Docker程序的机器（Docker直接安装在操作系统上的）docker客户端（Client）:操作docker主机docker仓库（Registry）：用来保存打包好的软件镜像docker镜像（Image）:软件打好包的镜像，放到docker的仓库中docker容器（Container）:镜像启动后的实例（5个容器启动5次镜像）docker的步骤：1、安装Docker2、去Docker仓库找到这个软件对应的镜像；3、使用Docker运行的这个镜像，镜像就会生成一个容器4、对容器的启动停止，就是对软件的启动和停止## 3、安装Docker### 1、安装Linux[安装vxbox并且安装ubuntu](http://note.youdao.com/noteshare?id=06ccb673d253fea78fe35430465758e1)### 2、在linux上安装docker```shell1、查看centos版本# uname -r3.10.0-693.el7.x86_64要求：大于3.10如果小于的话升级*（选做）# yum update2、安装docker# yum install docker3、启动docker# systemctl start docker# docker -v4、开机启动docker# systemctl enable docker5、停止docker# systemctl stop docker```## 4、docker的常用操作### 1、镜像操作1、搜索```shelldocker search mysql```默认去docker hub网站查找![44.docker1](E:\工作文档\SpringBoot\images\44.docker1.jpg)2、拉取```shell默认最新版本# docekr pull mysql安装指定版本# docker pull mysql:5.5```3、查看```shelldocker images```4、删除```docker rmi imageid```### 2、容器操作软件的镜像（qq.exe） -- 运行镜像 -- 产生一个容器（正在运行的软件）```shell1、搜索镜像# docker search tomcat2、拉取镜像# docker pull tomcat3、根据镜像启动容器[root@lion ~]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEdocker.io/tomcat    latest              d3d38d61e402        35 hours ago        549 MB[root@lion ~]# docker run --name mytomcat -d tomcat:latest2f0348702f5f2a2777082198795d8059d83e5ee38f430d2d44199939cc63e2494、查看那个进程正在进行[root@lion ~]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES2f0348702f5f        tomcat:latest       "catalina.sh run"   41 seconds ago      Up 39 seconds       8080/tcp            mytomcat5、停止运行中容器[root@lion ~]# docker stop 2f0348702f5f2f0348702f5f6、查看所有容器[root@lion ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                       PORTS               NAMES2f0348702f5f        tomcat:latest       "catalina.sh run"   52 minutes ago      Exited (143) 2 minutes ago                       mytomcat7、启动容器[root@lion ~]# docker start 2f0348702f5f8、删除docker容器[root@lion ~]# docker rm 2f0348702f5f2f0348702f5f9、端口映射[root@lion ~]# docker run --name mytomcat -d -p 8888:8080 tomcat692c408c220128014df32ecb6324fb388427d1ecd0ec56325580135c58f63b29虚拟机:8888容器的:8080-d:后台运行-p:主机端口映射到容器端口浏览器：192.168.179.129:888810、docker的日志[root@lion ~]# docker logs 692c408c220111、多个启动[root@lion ~]# docker run -d -p 9000:8080 --name mytomcat2 tomcat浏览器：192.168.179.129:9000```更多命令参考docker镜像文档### 3、安装Mysql```shelldocker pull mysqldocker run --name mysql001 -e MYSQL_ROOT_PASSWORD -d -p 3307:3306 mysql```# 六、数据访问## 1、整合JDBC数据源1、新建项目 spring-boot-06-data-jdbc- WEB- Mysql- JDBC- SpringBoot1.52、编写配置文件appliction.yml```yamlspring:  datasource:    username: root    password: Welcome_1    url: jdbc:mysql://192.168.179.131:3306/jdbc    driver-class-name: com.mysql.jdbc.Driver```3、编写测试类测试```java@RunWith(SpringRunner.class)@SpringBootTestpublic class SpringBoot06DataJdbcApplicationTests {    @Autowired    DataSource dataSource;    @Test    public void contextLoads() throws SQLException {        System.out.println(dataSource.getClass());        Connection connection = dataSource.getConnection();        System.out.println(connection);        connection.close();    }}```4、测试结果```class org.apache.tomcat.jdbc.pool.DataSourceProxyConnection[PooledConnection[com.mysql.jdbc.JDBC4Connection@c35af2a]]```数据源相关配置都在DataSourceProperties属性里自动配置原理E:\Develop\Maven_Repo\org\springframework\boot\spring-boot-autoconfigure\1.5.13.RELEASE\spring-boot-autoconfigure-1.5.13.RELEASE.jar!\org\springframework\boot\autoconfigure\jdbc### 1、DataSource参考DataSourceConfiguration,根据配置创建数据源，默认是使用tomcat连接池，可以使用spring.datasource.type指定自定义的数据源### 2、SpringBoot默认支持```Tomcat数据源HikariDataSourcedbcp.BasicDataSourcedbcp2.BasicDataSource```### 3、自定义数据源```java */@ConditionalOnMissingBean(DataSource.class)@ConditionalOnProperty(name = "spring.datasource.type")static class Generic {   @Bean   public DataSource dataSource(DataSourceProperties properties) {       //使用builder创建数据源，利用反射创建相应的type数据源，并绑定数据源      return properties.initializeDataSourceBuilder().build();   }}```### 4、运行sql建表在DataSourceAutoConfiguration中**DataSourceInitializer**类监听器作用：1）、postConstruct -》runSchemaScript 运行建表sql文件2）、runDataScript运行插入数据的sql语句；默认只需要将文件命名为：```sqlschema-*.sql data-*.sql默认规则：schema.sql ,schema-all.sql;```**举个栗子**创建department表1、department.sql```sql/*Navicat MySQL Data TransferSource Server         : 192.168.179.131Source Server Version : 50719Source Host           : 192.168.179.131:3306Source Database       : jdbcTarget Server Type    : MYSQLTarget Server Version : 50719File Encoding         : 65001Date: 2018-05-14 14:28:52*/SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for department-- ----------------------------DROP TABLE IF EXISTS `department`;CREATE TABLE `department` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `departmentName` varchar(255) DEFAULT '',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;```2、将department.sql命名为schema-all.sql![45.schema-all](E:\工作文档\SpringBoot\images\45.schema-all.jpg)3、运行测试类自定义sql的文件名，department.sql在配置文件中```yamlschema:  - classpath:department.sql```-----### 5、操作JdbcTemplate**FBI warning**:将department.sql删除或者改名，因为运行文件会将表中数据清除1、新建一个Controller```java@Controllerpublic class HelloController {    @Autowired    JdbcTemplate jdbcTemplate;    @ResponseBody    @GetMapping("/hello")    public Map&lt;String ,Object&gt; hello(){        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList("select * from department");        return list.get(0);    }}```2、表中添加数据![46.department](E:\工作文档\SpringBoot\images\46.department.jpg)3、访问请求查询数据![47.hello](E:\工作文档\SpringBoot\images\47.hello.jpg)## 2、自定义数据源1、导入Druid的依赖```xml&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;druid&lt;/artifactId&gt;    &lt;version&gt;1.1.9&lt;/version&gt;&lt;/dependency&gt;```2、修改配置文件```yamlspring:  datasource:    username: root    password: Welcome_1    url: jdbc:mysql://192.168.179.131:3306/jdbc    driver-class-name: com.mysql.jdbc.Driver    type: com.alibaba.druid.pool.DruidDataSource#    schema:#      - classpath:department.sqlserver:  port: 9000```已经替换了原来的tomcat数据源3、配置Druid数据源配置```yamlspring:  datasource:    username: root    password: Welcome_1    url: jdbc:mysql://192.168.179.131:3306/jdbc    driver-class-name: com.mysql.jdbc.Driver    type: com.alibaba.druid.pool.DruidDataSource# 初始化大小，最小，最大      initialSize: 5    minIdle: 5    maxActive: 20    # 配置获取连接等待超时的时间      maxWait: 60000    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒     timeBetweenEvictionRunsMillis: 60000    # 配置一个连接在池中最小生存的时间，单位是毫秒     minEvictableIdleTimeMillis: 300000    validationQuery: SELECT 1 FROM DUAL    testWhileIdle: true    testOnBorrow: false    testOnReturn: false    poolPreparedStatements: true    # 配置监控统计拦截的filters,去掉监控界面sql无法统计，‘wall’用于防火墙    filters: stat,wall,log4j    maxPoolPreparedStatementPerConnectionSize: 20    userGlobalDataSourceStat: true    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500#    schema:#      - classpath:department.sqlserver:  port: 9000```4、Druid配置监控```java@Configurationpublic class DruidConfig {    @ConfigurationProperties(prefix = "spring.datasource")    @Bean    public DataSource druid(){        return  new DruidDataSource();    }    //配置Druid的监控    //1、配置一个管理后台    @Bean    public ServletRegistrationBean statViewServlet(){        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(),"/druid/*");        Map&lt;String,String&gt; initParams =new HashMap&lt;&gt;();        initParams.put("loginUsername", "admin");        initParams.put("loginPassword", "123456");        bean.setInitParameters(initParams);        return bean;    }    //2、配置监控的filter    @Bean    public FilterRegistrationBean webstatFilter(){        FilterRegistrationBean bean = new FilterRegistrationBean();        bean.setFilter(new WebStatFilter());        Map&lt;String,String&gt; initParams =new HashMap&lt;&gt;();        initParams.put("exclusions", "*.js,*.css,/druid/*");        bean.setInitParameters(initParams);        bean.setUrlPatterns(Arrays.asList("/*"));        return bean;    }}```5、运行测试，访问 localhost:9000/druid![48.druid](E:\工作文档\SpringBoot\images\48.druid.jpg)输入刚才调好的用户名密码即可访问## 3、整合Mybatis1、新建工程，SpringBoot1.5+web+JDBC+Mysql导入依赖```xml&lt;dependency&gt;    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;druid&lt;/artifactId&gt;    &lt;version&gt;1.1.9&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;```2、导入配置文件中关于Druid的配置2.1、导入依赖2.2、配置文件application.yml（指定用户名密码...配置Druid的配置参数，修改sql文件加载的默认名）2.3、将Druid组件加入到容器中（监控）重点具体同上3、创建数据表department和employee表3.1、根据sql文件，新建两张表3.2、修改加载的sql名（默认为schema.sql和schema-all.sql）```yamlspring:  datasource:    schema:      - classpath:sql/department.sql      - classpath:sql/employeee.sql```3.3、运行程序检查数据库是否创建成功4、创建数据库对应的JavaBean （驼峰命名，getter/setter toString/注释掉schema防止重复创建） 在配置文件中修改驼峰命名开启 ,不写配置文件就写配置类```yamlmybatis:  configuration:    map-underscore-to-camel-case: true``````java//类名冲突所以全类名@org.springframework.context.annotation.Configurationpublic class MyBatisConfig {    @Bean    public ConfigurationCustomizer configurationCustomizer(){        return new ConfigurationCustomizer() {            @Override            public void customize(Configuration configuration) {                configuration.setMapUnderscoreToCamelCase(true);            }        };    }}```### 注解方式5、新建mapper```yaml//指定是一个mapper@Mapperpublic interface DepartmentMapper {    @Insert("insert into department(dept_name) value(#{deptName})")    public int insertDept(Department department);    @Delete("delete from department where id=#{id}")    public int deleteDeptById(Integer id);    @Update("update department set dept_Name=#{deptName} where id=#{id}")    public int updateDept(Department department);    @Select("select * from department where id=#{id}")    public Department getDeptById(Integer id);}```6、编写controller测试```java@RestControllerpublic class DeptController {    @Autowired    DepartmentMapper departmentMapper;    @RequestMapping("/getDept/{id}")    public Department getDepartment(@PathVariable("id") Integer id){        return departmentMapper.getDeptById(id);    }    @RequestMapping("/delDept/{id}")    public int delDept(@PathVariable("id") Integer id){        return departmentMapper.deleteDeptById(id);    }    @RequestMapping("/update/{id}")    public int updateDept(@PathVariable("id") Integer id){        return departmentMapper.updateDept(new Department(id, "开发部"));    }    @GetMapping("/insert")    public int insertDept(Department department){        return departmentMapper.insertDept(department);    }}```问题：mapper文件夹下有多个mapper文件，加麻烦，可以直接扫描整个mapper文件夹下的mapper```java//主配置类或者mybatis配置类@MapperScan(value = "com.wdjr.springboot.mapper")```### 配置文件方式1、新建文件![50.mybatisxml](E:\工作文档\SpringBoot\images\50.mybatisxml.jpg)2、新建mybatis的配置文件```xml&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt;    &lt;settings&gt;        &lt;setting name="mapUnderscoreToCamelCase" value="true"/&gt;    &lt;/settings&gt;&lt;/configuration&gt;```3、新建Employee的接口方法```javapublic interface EmployeeMapper {    public Employee getEmpById(Integer id);    public void insetEmp(Employee employee);}```4、新建Employee的mapper.xml的映射文件```xml&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.wdjr.springboot.mapper.EmployeeMapper"&gt;    &lt;select id="getEmpById" resultType="com.wdjr.springboot.bean.Employee"&gt;      select * from employee where id=#{id}   &lt;/select&gt;    &lt;insert id="insetEmp"&gt;        INSERT  INTO employee(last_name,email,gender,d_id) VALUES (#{lastName},#{email},#{gender},#{dId})    &lt;/insert&gt;&lt;/mapper&gt;```5、修改application.yml配置文件```yamlmybatis:  config-location: classpath:mybatis/mybatis-config.xml  mapper-locations: classpath:mybatis/mapper/*.xml```6、新建一个Controller访问方法```java@RestControllerpublic class EmployeeController {    @Autowired    EmployeeMapper employeeMapper;    @RequestMapping("/getEmp/{id}")    public Employee getEmp(@PathVariable("id") Integer id){        return employeeMapper.getEmpById(id);    }    @GetMapping("/insertEmp")    public Employee insertEmp(Employee employee){        employeeMapper.insetEmp(employee);        return employee;    }}```## 4、JPA数据访问新建工程 springBoot1.5+Web+JPA+MYSQL+JDBC目录结构![51.JPA](E:\工作文档\SpringBoot\images\51.JPA.jpg)1、新建一个实体类User```java//使用JPA注解配置映射关系@Entity//告诉JPA这是一个实体类（和数据表映射的类）@Table(name="tbl_user") //@Table来指定和那个数据表对应，如果省略默认表明就是user;public class User {    @Id //这是一个主键    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增组件    private Integer id ;    @Column(name="last_name",length = 50) //这是和数据表对应的一个列    private String lastName;    @Column//省略默认列名就是属性名    private String email;    @Column    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getLastName() {        return lastName;    }    public void setLastName(String lastName) {        this.lastName = lastName;    }    public String getEmail() {        return email;    }    public void setEmail(String email) {        this.email = email;    }}```2、新建一个UserRepository来继承jpa的绝大多数功能```java//继承jpaRepositorypublic interface UserRepository extends JpaRepository&lt;User,Integer&gt; {}```3、编写配置文件application.yml```yamlspring:  datasource:    url: jdbc:mysql://192.168.179.131/jpa    username: root    password: Welcome_1    driver-class-name: com.mysql.jdbc.Driver  jpa:    hibernate:    #更新或创建      ddl-auto: update    show-sql: true```4、编写Controller测试```java@RestControllerpublic class UserController {    @Autowired    UserRepository userRepository;    @GetMapping("/user/{id}")    public User getUser(@PathVariable("id") Integer id){        User user = userRepository.findOne(id);        return user;    }    @GetMapping("/insert")    public User insertUser(User user){        User user1 = userRepository.save(user);        return  user1;    }}```# 七、启动配置原理几个重要的事件回调机制加载配置文件META-INF/spring.factoriesApplicationContextInitializerSpringApplicationRunListenerioc容器中ApplicationRunnerCommandLineRunner启动流程## 1、创建SpringApplicaiotn对象   ```javaprivate void initialize(Object[] sources) {    //保存主配置类   if (sources != null &amp;&amp; sources.length &gt; 0) {      this.sources.addAll(Arrays.asList(sources));   }    //判断当前是否是个web应用   this.webEnvironment = deduceWebEnvironment();    //从类路径下找到META-INF/spring.factories配置中的所有ApplicationInitializer 然后保存起来   setInitializers((Collection) getSpringFactoriesInstances(         ApplicationContextInitializer.class));    //从类路径下找到META-INF/spring.factories配置中的所有ApplicationListener 然后保存起来   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));    //决定哪一个是主程序   this.mainApplicationClass = deduceMainApplicationClass();}```ApplicationInitializer![52.applicationCotextInitializer](E:\工作文档\SpringBoot\images\52.applicationCotextInitializer.jpg) ApplicationListener![53.Listener](E:\工作文档\SpringBoot\images\53.Listener.jpg)## 2、运行Run方法```javapublic ConfigurableApplicationContext run(String... args) {   StopWatch stopWatch = new StopWatch();   stopWatch.start();   ConfigurableApplicationContext context = null;   FailureAnalyzers analyzers = null;   configureHeadlessProperty();    //获取SpringApplicationRunListeners;从类路径下META-INF/spring.factory   SpringApplicationRunListeners listeners = getRunListeners(args);    //回调所有的SpringApplicationRunListener.starting()方法   listeners.starting();   try {       //封装命令行参数      ApplicationArguments applicationArguments = new DefaultApplicationArguments(            args);       //准备环境      ConfigurableEnvironment environment = prepareEnvironment(listeners,            applicationArguments);       //创建环境，完成后回调SpringApplicationRunListener.environmentPrepared环境准备完成       //打印SpringBoot图标      Banner printedBanner = printBanner(environment);       //创建ApplicationContext，决定创建web的ioc容器还是普通的ioc      context = createApplicationContext();       //异常分析      analyzers = new FailureAnalyzers(context);       //重点：将environment保存的ioc中，applyInitializers初始化器上面那6个的获取，并且回调ApplicationContextInitializer.initialize方法              //回调所有的SpringApplicationRunListener的contextPrepare()       //告诉prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded      prepareContext(context, environment, listeners, applicationArguments,            printedBanner);       //重要：刷新所有组件 ioc容器初始化，如果是web应用还会创建嵌入式的tomcat       //扫描 创建加载所有组件的地方      refreshContext(context);       //从ioc中获取所有的ApplicationRunner和CommandLineRunner       //ApplicationRunner先回调      afterRefresh(context, applicationArguments);       //所有的SpringApplicationRunListener回调finished方法      listeners.finished(context, null);       //保存应用状态      stopWatch.stop();      if (this.logStartupInfo) {         new StartupInfoLogger(this.mainApplicationClass)               .logStarted(getApplicationLog(), stopWatch);      }       //整个springboot启动完成以后返回启动的ioc容器      return context;   }   catch (Throwable ex) {      handleRunFailure(context, listeners, analyzers, ex);      throw new IllegalStateException(ex);   }}```## 3、事件监听机制新建listener监听文件目录![54.listener2](E:\工作文档\SpringBoot\images\54.listener2.jpg)1、HelloApplicationContextInitializer```java//泛型监听ioc容器public class HelloApplicationContextInitializer implements ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; {    @Override    public void initialize(ConfigurableApplicationContext applicationContext) {        System.out.println("ApplicationContextInitializer...跑起来了....."+applicationContext);    }}```2、HelloSpringApplicationRunListener加构造器```javapublic class HelloSpringApplicationRunListener implements SpringApplicationRunListener {    public HelloSpringApplicationRunListener(SpringApplication application, String[] args){    }    @Override    public void starting() {        System.out.println("监听容器开始......");    }    @Override    public void environmentPrepared(ConfigurableEnvironment environment) {        System.out.println("环境准备好了......"+environment.getSystemProperties().get("os.name"));    }    @Override    public void contextPrepared(ConfigurableApplicationContext context) {        System.out.println("ioc容器准备好了......");    }    @Override    public void contextLoaded(ConfigurableApplicationContext context) {        System.out.println("容器环境已经加载完成......");    }    @Override    public void finished(ConfigurableApplicationContext context, Throwable exception) {        System.out.println("全部加载完成......");    }}```3、HelloApplicationRunner```java@Componentpublic class HelloApplicationRunner implements ApplicationRunner {    @Override    public void run(ApplicationArguments args) throws Exception {        System.out.println("ApplicationRunner.....run....");    }}```4、HelloCommandLineRunner```java@Componentpublic class HelloCommandLineRunner implements CommandLineRunner {    @Override    public void run(String... args) throws Exception {        System.out.println("CommandLineRunner......run....."+Arrays.asList(args));    }}```事件运行方法HelloApplicationContextInitializer和HelloSpringApplicationRunListener文件META-INF/spring.factories中加入```# Initializersorg.springframework.context.ApplicationContextInitializer=\com.wdjr.springboot.listener.HelloApplicationContextInitializerorg.springframework.boot.SpringApplicationRunListener=\com.wdjr.springboot.listener.HelloSpringApplicationRunListener```HelloApplicationRunner和HelloCommandLineRunner ioc加入@Component# 八、SpringBoot的自定义starterstarter：场景启动器1、场景需要使用什么依赖？2、如何编写自动配置```java@Configuration //指定这个类是一个配置类@ConditionalOnXXX //在指定条件下成立的情况下自动配置类生效@AutoConfigureAfter //指定自动配置类的顺序@Bean //给容器中添加组件@ConfigurationProperties //结合相关xxxProperties类来绑定相关的配置@EnableConfigurationProperties //让xxxProperties生效加到容器中自动配置类要能加载将需要启动就加载的自动配置类，配置在META-INF/spring.factories# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\```3、模式启动器空的jar只需要做依赖管理导入；专门写一个自动配置模块；启动器依赖自动配置，别人只需要引入starterxxx-spring-boot-starter### 新建一个starter&gt; 绕的你怀疑人生#### 1、新建一个空项目工程![56.starter01](E:\工作文档\SpringBoot\images\56.starter01.jpg)2、项目命名![57.starter02](E:\工作文档\SpringBoot\images\57.starter02.jpg)3、导入module![58.starter03](E:\工作文档\SpringBoot\images\58.starter03.jpg)4、新建一个Maven工程![59.starter04](E:\工作文档\SpringBoot\images\59.starter04.jpg)5、项目命名![60.starter05](E:\工作文档\SpringBoot\images\60.starter05.jpg)![61.starter06](E:\工作文档\SpringBoot\images\61.starter06.jpg)6、在新建一个autoconfiguration类的spring![62.starter07](E:\工作文档\SpringBoot\images\62.starter07.jpg)7、项目命名![63.starter08](E:\工作文档\SpringBoot\images\63.starter08.jpg)8、无需导入依赖![64.starter09](E:\工作文档\SpringBoot\images\64.starter09.jpg)9、next![65.starter10](E:\工作文档\SpringBoot\images\65.starter10.jpg)最后配置完成#### 2、编写starter##### autoconfigurer对**lxy-spring-boot-starter-autoconfigurer**进行删减目录![66.starter-build01](E:\工作文档\SpringBoot\images\66.starter-build01.jpg)2、pom文件修改```xml    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;```3、编写相关的类![67.starter-build02](E:\工作文档\SpringBoot\images\67.starter-build02.jpg)4、HelloProperties```javapackage com.lxy.starter;import org.springframework.boot.context.properties.ConfigurationProperties;@ConfigurationProperties(prefix = "lxy.hello")public class HelloProperties {    private String prefix;    private String suffix;    public String getPrefix() {        return prefix;    }    public void setPrefix(String prefix) {        this.prefix = prefix;    }    public String getSuffix() {        return suffix;    }    public void setSuffix(String suffix) {        this.suffix = suffix;    }}```5、HelloService```javapackage com.lxy.starter;public class HelloService {    HelloProperties helloProperties;    public HelloProperties getHelloProperties() {        return helloProperties;    }    public void setHelloProperties(HelloProperties helloProperties) {        this.helloProperties = helloProperties;    }    public String sayHello(String name){        return helloProperties.getPrefix()+name+helloProperties.getSuffix();    }}```6、HelloServiceAutoConfiguration```javapackage com.lxy.starter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@ConditionalOnWebApplication@EnableConfigurationProperties(HelloProperties.class)public class HelloServiceAutoConfiguration {    @Autowired    HelloProperties helloProperties;    @Bean    public HelloService helloService(){        HelloService service = new HelloService();        service.setHelloProperties(helloProperties);        return service;    }}```7、配置文件```org.springframework.boot.autoconfigure.EnableAutoConfiguration=\com.lxy.starter.HelloServiceAutoConfiguration```8、修改lxy-spring-boot-starter 也就是之前的Maven项目，修改pom文件引入autoconfiguration依赖```xml&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.lxy.starter&lt;/groupId&gt;        &lt;artifactId&gt;lxy-spring-boot-starter-autoconfigurer&lt;/artifactId&gt;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;```9、install生成![68.starter-build03](E:\工作文档\SpringBoot\images\68.starter-build03.jpg)#### 3、测试新建一个springboot 1.5+web1、引入starter```xml    &lt;dependency&gt;        &lt;groupId&gt;com.lxy.starter&lt;/groupId&gt;        &lt;artifactId&gt;lxy-spring-boot-starter&lt;/artifactId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;```2、新建一个Controller用来测试```java@RestControllerpublic class HelloController {    @Autowired    HelloService helloService;    @GetMapping    public  String hello(){        return helloService.sayHello("test");    }}```3、编写配置文件制定前缀和后缀名```propertieslxy.hello.prefix=Starter-lxy.hello.suffix=-Success```4、运行访问http://localhost:8080/hello![70.starter-build05](E:\工作文档\SpringBoot\images\70.starter-build05.jpg)成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="java" scheme="http://www.liniuniu.top/categories/java/"/>
    
    
    <category term="java" scheme="http://www.liniuniu.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 37. Sudoku Solver 解数独</title>
    <link href="http://www.liniuniu.top/posts/a7061b21.html"/>
    <id>http://www.liniuniu.top/posts/a7061b21.html</id>
    <published>2021-09-28T06:13:00.000Z</published>
    <updated>2021-09-28T13:06:48.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p><p>A sudoku solution must satisfy <strong>all of the following rules</strong>:</p><ol><li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li><li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li><li>Each of the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li></ol><p>The <code>'.'</code> character indicates empty cells.</p></li></ul><p>  <strong>Example 1:</strong></p><p>  <img src="https://cdn.jsdelivr.net/gh/cumark/picBed/20210928141109.png"></p>  <pre class="line-numbers language-none"><code class="language-none">Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]Explanation: The input board is shown above and the only valid solution is shown below:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   <img src="https://cdn.jsdelivr.net/gh/cumark/picBed/20210928141144.png"></p><p>  <strong>Constraints:</strong></p><ul><li><code>board.length == 9</code></li><li><code>board[i].length == 9</code></li><li><code>board[i][j]</code> is a digit or <code>'.'</code>.</li><li>It is <strong>guaranteed</strong> that the input board has only one solution.</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题要求解<code>9*9</code>数组数独，可以采用递归回溯法，分为主函数和回溯函数和验证函数，</p><p>主函数：传递到回溯函数</p><p>回溯函数：遍历数组数独，递归验证是否符合数独标准，若不符合则回溯至上一层，直到全部符合数独标准为止。</p><p>验证函数：只验证新改变的坐标是否符合数独</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>使用递归回溯的方法，不断验证，直到出现符合全部数独标准的一组结果。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span>ch<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">;</span>ch<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>ch<span class="token punctuation">;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>index<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'.'</span><span class="token operator">&amp;&amp;</span>board<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'.'</span><span class="token operator">&amp;&amp;</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>index<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>index<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'.'</span><span class="token operator">&amp;&amp;</span>board<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>index<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>index<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span>ch<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="dfs" scheme="http://www.liniuniu.top/tags/dfs/"/>
    
    <category term="backtrace" scheme="http://www.liniuniu.top/tags/backtrace/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 36. Valid Sudoku 有效的数独</title>
    <link href="http://www.liniuniu.top/posts/5cf1e14c.html"/>
    <id>http://www.liniuniu.top/posts/5cf1e14c.html</id>
    <published>2021-09-28T06:00:00.000Z</published>
    <updated>2021-09-28T13:06:33.956Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Determine if a <code>9 x 9</code> Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p><ol><li>Each row must contain the digits <code>1-9</code> without repetition.</li><li>Each column must contain the digits <code>1-9</code> without repetition.</li><li>Each of the nine <code>3 x 3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li></ol><p><strong>Note:</strong></p><ul><li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li><li>Only the filled cells need to be validated according to the mentioned rules.</li></ul><p><strong>Example 1:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/20210928140252.png"></p><pre class="line-numbers language-none"><code class="language-none">Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]Output: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: board = [["8","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]Output: falseExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>board.length == 9</code></li><li><code>board[i].length == 9</code></li><li><code>board[i][j]</code> is a digit <code>1-9</code> or <code>'.'</code>.</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题要求验证当前状态下的<code>9*9</code>数组是否为有效的数独，难点在于对9宫格之中<code>3*3</code>方格的验证，这里可以采用<code>board[(i/3)*3+j/3][(i%3)*3+j%3]</code>的方式进行表示，遍历即可</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>遍历9*9数组，若不出现重复，则返回true</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>board<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'.'</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>                     set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>j<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 130. Surrounded Regions 被围绕的区域</title>
    <link href="http://www.liniuniu.top/posts/372ac7d5.html"/>
    <id>http://www.liniuniu.top/posts/372ac7d5.html</id>
    <published>2021-09-28T05:42:00.000Z</published>
    <updated>2021-09-28T13:08:11.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given an <code>m x n</code> matrix <code>board</code> containing <code>'X'</code> and <code>'O'</code>, <em>capture all regions that are 4-directionally surrounded by</em> <code>'X'</code>.</p><p>A region is <strong>captured</strong> by flipping all <code>'O'</code>s into <code>'X'</code>s in that surrounded region.</p><p><strong>Example 1:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/xogrid.jpg" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]Explanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: board = [["X"]]Output: [["X"]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>m == board.length</code></li><li><code>n == board[i].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>board[i][j]</code> is <code>'X'</code> or <code>'O'</code>.</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题要求边缘O及与边缘的O直接相连的O不做改变，其他的O全部改为X，那么可以仅dfs遍历矩阵的边缘，对于O，则进行dfs遍历，并将之置为M。最后再将所有M置为O，O置为X即可。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>采用dfs，遍历矩阵边缘，最后再遍历整个矩阵，将所作的标记更新</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>i<span class="token punctuation">,</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>board<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>board<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'M'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'O'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'X'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">&gt;=</span>board<span class="token punctuation">.</span>length<span class="token operator">||</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">&gt;=</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">||</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'O'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="dfs" scheme="http://www.liniuniu.top/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 208. Implement Trie (Prefix Tree) 实现Trie（前缀树）</title>
    <link href="http://www.liniuniu.top/posts/756a1399.html"/>
    <id>http://www.liniuniu.top/posts/756a1399.html</id>
    <published>2021-09-28T05:30:00.000Z</published>
    <updated>2021-09-28T13:03:24.957Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>A <a href="https://en.wikipedia.org/wiki/Trie"><strong>trie</strong></a> (pronounced as “try”) or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p><p>Implement the Trie class:</p><ul><li><code>Trie()</code> Initializes the trie object.</li><li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li><li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li><li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li></ul><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input["Trie", "insert", "search", "search", "startsWith", "insert", "search"][[], ["apple"], ["apple"], ["app"], ["app"], ["app"], ["app"]]Output[null, null, true, false, true, null, true]ExplanationTrie trie = new Trie();trie.insert("apple");trie.search("apple");   // return Truetrie.search("app");     // return Falsetrie.startsWith("app"); // return Truetrie.insert("app");trie.search("app");     // return True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li><li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li><li>At most <code>3 * 104</code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题要求设计一个Trie数的类，首先需定义一个节点，TrieNode节点应该包括如下部分：</p><p>1.包含TrieNode节点值</p><p>2.包含是否完整词汇的判断</p><p>3.包含TrieNode节点的子节点，其中应该包括26个英文字母</p><p>4.包含创建TrieNode的方法，具体有TrieNode()空函数值，及赋node节点值的方法</p><p>设计TrieNode节点后，可以设置一个root空节点，当insert时，则插入于root空节点之后</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>设计TrieNode节点，当insert时，则插入字典树所不存在的字符，并在插入完之后，将isWord置为true。</p><p>当search时，从root节点，遍历字典树。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> val<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> isWord<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TrieNode</span> node<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>val<span class="token operator">=</span>c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">TrieNode</span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>val<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TrieNode</span> node<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            node<span class="token operator">=</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token punctuation">.</span>isWord<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TrieNode</span> node<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span>word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token operator">=</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>isWord<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TrieNode</span> node<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span>prefix<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token operator">=</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Your Trie object will be instantiated and called as such: * Trie obj = new Trie(); * obj.insert(word); * boolean param_2 = obj.search(word); * boolean param_3 = obj.startsWith(prefix); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 410. Split Array Largest Sum 分割数组的最大值</title>
    <link href="http://www.liniuniu.top/posts/af957438.html"/>
    <id>http://www.liniuniu.top/posts/af957438.html</id>
    <published>2021-09-28T05:15:00.000Z</published>
    <updated>2021-09-28T12:45:10.061Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given an array <code>nums</code> which consists of non-negative integers and an integer <code>m</code>, you can split the array into <code>m</code> non-empty continuous subarrays.</p><p>Write an algorithm to minimize the largest sum among these <code>m</code> subarrays.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums = [7,2,5,10,8], m = 2Output: 18Explanation:There are four ways to split nums into two subarrays.The best way is to split it into [7,2,5] and [10,8],where the largest sum among the two subarrays is only 18.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums = [1,2,3,4,5], m = 2Output: 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums = [1,4,4], m = 3Output: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>0 &lt;= nums[i] &lt;= 106</code></li><li><code>1 &lt;= m &lt;= min(50, nums.length)</code></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题要求这m个子数组各自和的最大值最小，应对数组问题，可以考虑二分搜索，首先要确定上下界。由于各自和的最大值会在max（nums[i]）和sum之间，可以以max为左边界，sum为右边界，利用二分搜索不断接近并得到答案。</p><p>在分割时，采用mid=（l+r）/2要确保数字总和足够大，而又小于结果之间。</p><p>我们会得到两种结果：</p><p>1.我们可以将数组分成m个以上子数列，这样，意味着我们的中间值太小，因此可以将l=mid+1;</p><p>2.不可以分成m个数列，这样说明中间值过大，可以将r=mid-1;</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>采用二分搜索的方法，不断遍历，直至左右边界相遇</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">splitArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            max<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum<span class="token operator">+=</span>num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>sum<span class="token punctuation">;</span>        <span class="token keyword">long</span> l<span class="token operator">=</span>max<span class="token punctuation">;</span><span class="token keyword">long</span> r<span class="token operator">=</span>sum<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">valid</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span>nums<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>l<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token keyword">long</span> target<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> total<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            total<span class="token operator">+=</span>num<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>total<span class="token operator">&gt;</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                total<span class="token operator">=</span>num<span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&gt;</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="binarySearch" scheme="http://www.liniuniu.top/tags/binarySearch/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 639. Decode Ways 解码方法 II</title>
    <link href="http://www.liniuniu.top/posts/1b13e86b.html"/>
    <id>http://www.liniuniu.top/posts/1b13e86b.html</id>
    <published>2021-09-27T12:35:00.000Z</published>
    <updated>2021-09-28T13:21:55.186Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>A message containing letters from <code>A-Z</code> can be <strong>encoded</strong> into numbers using the following mapping:</p><pre class="line-numbers language-none"><code class="language-none">'A' -&gt; "1"'B' -&gt; "2"...'Z' -&gt; "26"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>To <strong>decode</strong> an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>"11106"</code> can be mapped into:</p><ul><li><code>"AAJF"</code> with the grouping <code>(1 1 10 6)</code></li><li><code>"KJF"</code> with the grouping <code>(11 10 6)</code></li></ul><p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>"06"</code> cannot be mapped into <code>'F'</code> since <code>"6"</code> is different from <code>"06"</code>.</p><p><strong>In addition</strong> to the mapping above, an encoded message may contain the <code>'*'</code> character, which can represent any digit from <code>'1'</code> to <code>'9'</code> (<code>'0'</code> is excluded). For example, the encoded message <code>"1*"</code> may represent any of the encoded messages <code>"11"</code>, <code>"12"</code>, <code>"13"</code>, <code>"14"</code>, <code>"15"</code>, <code>"16"</code>, <code>"17"</code>, <code>"18"</code>, or <code>"19"</code>. Decoding <code>"1*"</code> is equivalent to decoding <strong>any</strong> of the encoded messages it can represent.</p><p>Given a string <code>s</code> consisting of digits and <code>'*'</code> characters, return <em>the <strong>number</strong> of ways to <strong>decode</strong> it</em>.</p><p>Since the answer may be very large, return it <strong>modulo</strong> <code>109 + 7</code>.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "*"Output: 9Explanation: The encoded message can represent any of the encoded messages "1", "2", "3", "4", "5", "6", "7", "8", or "9".Each of these can be decoded to the strings "A", "B", "C", "D", "E", "F", "G", "H", and "I" respectively.Hence, there are a total of 9 ways to decode "*".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "1*"Output: 18Explanation: The encoded message can represent any of the encoded messages "11", "12", "13", "14", "15", "16", "17", "18", or "19".Each of these encoded messages have 2 ways to be decoded (e.g. "11" can be decoded to "AA" or "K").Hence, there are a total of 9 * 2 = 18 ways to decode "1*".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "2*"Output: 15Explanation: The encoded message can represent any of the encoded messages "21", "22", "23", "24", "25", "26", "27", "28", or "29"."21", "22", "23", "24", "25", and "26" have 2 ways of being decoded, but "27", "28", and "29" only have 1 way.Hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode "2*".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s[i]</code> is a digit or <code>'*'</code>.</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>字符串问题，优先考虑动态规划的方法。因数值比较大，设置<code>long[] dp</code>，分析dp[i]和dp[i-1]与dp[i-2]之间的关系，有以下几种情况：</p><pre class="line-numbers language-none"><code class="language-none"> For dp[i-1]:                 /           \                /             \           s[i-1]='*'    s[i-1]&gt;0                    |               |         + 9*dp[i-1]        + dp[i-1]                   For dp[i-2]:                  /                                  \                 /                                    \               s[n-2]='1'||'2'                         s[n-2]='*'             /            \                       /             \            s[n-1]='*'         s[n-1]!='*'          s[n-1]='*'       s[n-1]!='*'        /       \               |                  |              /         \ s[n-2]='1'  s[n-2]='2'   num(i-2,i-1)&lt;=26         |         s[n-1]&lt;=6    s[n-1]&gt;6     |            |             |                  |              |            |+ 9*dp[i-2]   + 6*dp[i-2]     + dp[i-2]       + 15*dp[i-2]    + 2*dp[i-2]   + dp[i-2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体可以设置相关条件，将dp[i]与dp[i-1]和dp[i-2]累加</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>运用动态规划方法，与爬楼梯问题类似，但情况较复杂，设置条件累加即可。由于数值较大，每一次遍历时，更新dp[i]取余的数值，以免溢出。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">9</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token string">'6'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="dp" scheme="http://www.liniuniu.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 5. Longest Palindromic Substring 最长回文子串</title>
    <link href="http://www.liniuniu.top/posts/b707e9b2.html"/>
    <id>http://www.liniuniu.top/posts/b707e9b2.html</id>
    <published>2021-09-27T12:20:00.000Z</published>
    <updated>2021-09-28T13:05:34.961Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given a string <code>s</code>, return <em>the longest palindromic substring</em> in <code>s</code>.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "babad"Output: "bab"Note: "aba" is also a valid answer.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "cbbd"Output: "bb"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "a"Output: "a"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 4:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "ac"Output: "a"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> consist of only digits and English letters.</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>字符串问题，优先考虑动态规划的方法。设置<code>boolean[][] dp</code>，在遍历时有如下几种情况</p><ul><li>当s.charAt(i)==s.charAt(j)时，这时<code>dp[i][j]=dp[i-1][j+1]</code></li><li>当i-j&lt;3时，这时<code>dp[i][j]=dp[i-1][j+1]</code></li></ul><p>这时会产生一个新的问题，就是需要先遍历以j，i为边界的区间之内明确的boolean判定值，那么采取i正向遍历，j以i为起点逆向遍历，是一个比较好的方式</p><p>如果<code>dp[i][j]</code>为true并且当前i-j+1&gt;所存结果的长度时，用string.substring来更新所存结果</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>运用动态规划方法，动态规划方程为，当s.charAt(i)==s.charAt(j)时，这时<code>dp[i][j]=dp[i-1][j+1]</code>，当i-j&lt;3时，这时<code>dp[i][j]=dp[i-1][j+1]</code>，并不断更新最长的子串</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="dp" scheme="http://www.liniuniu.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 151. Reverse Words in a String 翻转字符串里的单词</title>
    <link href="http://www.liniuniu.top/posts/a17663d9.html"/>
    <id>http://www.liniuniu.top/posts/a17663d9.html</id>
    <published>2021-09-27T12:05:00.000Z</published>
    <updated>2021-09-28T13:08:25.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given an input string <code>s</code>, reverse the order of the <strong>words</strong>.</p><p>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by at least one space.</p><p>Return <em>a string of the words in reverse order concatenated by a single space.</em></p><p><strong>Note</strong> that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "the sky is blue"Output: "blue is sky the"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "  hello world  "Output: "world hello"Explanation: Your reversed string should not contain leading or trailing spaces.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "a good   example"Output: "example good a"Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 4:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "  Bob    Loves  Alice   "Output: "Alice Loves Bob"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 5:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "Alice does not even like bob"Output: "bob like even not does Alice"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>' '</code>.</li><li>There is <strong>at least one</strong> word in <code>s</code>.</li></ul><p><strong>Follow-up:</strong> If the string data type is mutable in your language, can you solve it <strong>in-place</strong> with <code>O(1)</code> extra space?</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.String中前后可能有空格，可以使用s.trim()方法消除</p><p>2.单词前后可能有多个空格，可以使用s.split(“ +”)方法消除，其中空格表示间隔的字符，+表示一个及超过一个字符</p><p>3.需要反转单词顺序，应用Collections.reverse(list)的方法，将数组用Arrays.asList（）方法转化为list</p><p>4.当前已经求出一个已反转的list，可以应用String.join(“ “,list/array)的方法，在单词见加入空格并汇集成string</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>应用java本身的特性，消除string前后空格以及单词之间的空格，反转单词，再转化为string即可</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" +"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="java" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/java/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 541. Reverse String II 反转字符串 II</title>
    <link href="http://www.liniuniu.top/posts/e834e913.html"/>
    <id>http://www.liniuniu.top/posts/e834e913.html</id>
    <published>2021-09-27T11:53:00.000Z</published>
    <updated>2021-09-28T13:10:39.631Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given a string <code>s</code> and an integer <code>k</code>, reverse the first <code>k</code> characters for every <code>2k</code> characters counting from the start of the string.</p><p>If there are fewer than <code>k</code> characters left, reverse all of them. If there are less than <code>2k</code> but greater than or equal to <code>k</code> characters, then reverse the first <code>k</code> characters and left the other as original.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "abcdefg", k = 2Output: "bacdfeg"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "abcd", k = 2Output: "bacd"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> consists of only lowercase English letters.</li><li><code>1 &lt;= k &lt;= 104</code></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.每隔k个字符，则反转k个字符串，可以设置一个左端点i和右端点i+k-1</p><p>2.构建reverse函数，反转左端点和右端点之间的字符即可</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>设置左右端点，遍历并反转字符</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> temp<span class="token operator">=</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 56. Merge Intervals 合并区间</title>
    <link href="http://www.liniuniu.top/posts/2ac753c1.html"/>
    <id>http://www.liniuniu.top/posts/2ac753c1.html</id>
    <published>2021-09-27T11:49:00.000Z</published>
    <updated>2021-09-28T13:07:15.811Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given an array of <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: intervals = [[1,3],[2,6],[8,10],[15,18]]Output: [[1,6],[8,10],[15,18]]Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: intervals = [[1,4],[4,5]]Output: [[1,5]]Explanation: Intervals [1,4] and [4,5] are considered overlapping.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= intervals.length &lt;= 104</code></li><li><code>intervals[i].length == 2</code></li><li><code>0 &lt;= starti &lt;= endi &lt;= 104</code></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>1.合并区间首先要确立左边界，应当对intervals数组以每个区间的左端点进行升序排序</p><p>2.然后将当前区间加入list之中，在list中与后续遍历区间的左端点进行对比</p><ul><li>若大于等于左端点，则于遍历区间的右端点进行对比，确立右端点界限</li><li>若小于左端点，则确立遍历节点为当前节点</li></ul><p>3.将list转换为数组，采用<code>ans.toArray(new int[ans.size()][])</code>的方式</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>初始化list存储结果区间，遍历区间，采取以上思想，返回不重叠区间数组</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> intervals<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span>i2<span class="token punctuation">)</span><span class="token operator">-&gt;</span>i1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>i2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cur<span class="token operator">=</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interval<span class="token operator">:</span>intervals<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;=</span>interval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>interval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                cur<span class="token operator">=</span>interval<span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JAVA中HashMap，TreeMap,LinkedHashMap,Hashtable的应用和比较</title>
    <link href="http://www.liniuniu.top/posts/ac4e5e8d.html"/>
    <id>http://www.liniuniu.top/posts/ac4e5e8d.html</id>
    <published>2021-09-27T10:54:00.000Z</published>
    <updated>2021-09-28T13:06:15.237Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-HashMap"><a href="#1-HashMap" class="headerlink" title="1.HashMap"></a>1.HashMap</h2><ul><li><p>HashMap实现提供O（1）的查找和插入，键的顺序是任意的，由链表数组实现。</p></li><li><p>HashMap包含基于键（entry）的值</p></li><li><p>它只包含又一个空键和多个空值</p></li><li><p>它不维持秩序</p></li></ul><p>部分底层源码：</p><pre class="line-numbers language-none"><code class="language-none">public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;    implements Map&lt;K,V&gt;, Cloneable, Serializable {    private static final long serialVersionUID = 362498820763181265L;static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16    /**     * The maximum capacity, used if a higher value is implicitly specified     * by either of the constructors with arguments.     * MUST be a power of two &lt;= 1&lt;&lt;30.     */    static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;    /**     * The load factor used when none specified in constructor.     */    static final float DEFAULT_LOAD_FACTOR = 0.75f;    /**     * The bin count threshold for using a tree rather than list for a     * bin.  Bins are converted to trees when adding an element to a     * bin with at least this many nodes. The value must be greater     * than 2 and should be at least 8 to mesh with assumptions in     * tree removal about conversion back to plain bins upon     * shrinkage.     */    static final int TREEIFY_THRESHOLD = 8;    /**     * The bin count threshold for untreeifying a (split) bin during a     * resize operation. Should be less than TREEIFY_THRESHOLD, and at     * most 6 to mesh with shrinkage detection under removal.     */    static final int UNTREEIFY_THRESHOLD = 6;    /**     * The smallest table capacity for which bins may be treeified.     * (Otherwise the table is resized if too many nodes in a bin.)     * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts     * between resizing and treeification thresholds.     */    static final int MIN_TREEIFY_CAPACITY = 64;    /**     * Basic hash bin node, used for most entries.  (See below for     * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)     */    static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; {        final int hash;        final K key;        V value;        Node&lt;K,V&gt; next;        Node(int hash, K key, V value, Node&lt;K,V&gt; next) {            this.hash = hash;            this.key = key;            this.value = value;            this.next = next;        }        public final K getKey()        { return key; }        public final V getValue()      { return value; }        public final String toString() { return key + "=" + value; }        public final int hashCode() {            return Objects.hashCode(key) ^ Objects.hashCode(value);        }        public final V setValue(V newValue) {            V oldValue = value;            value = newValue;            return oldValue;        }        public final boolean equals(Object o) {            if (o == this)                return true;            if (o instanceof Map.Entry) {                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;                if (Objects.equals(key, e.getKey()) &amp;&amp;                    Objects.equals(value, e.getValue()))                    return true;            }            return false;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-TreeMap"><a href="#2-TreeMap" class="headerlink" title="2.TreeMap"></a>2.TreeMap</h2><ul><li><p>TreeMap提供O(logN)的查找和插入</p></li><li><p>键是有序的，可以按照排序的顺序遍历，按照升序</p></li><li><p>TreeMap底层由红黑树实现</p></li><li><p>和HashMap一样，只包含独一的元素</p></li><li><p>不能有空键，但可以有多个空值</p></li></ul><p>部分底层源码：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">public class TreeMap&lt;K,V&gt;    extends AbstractMap&lt;K,V&gt;    implements NavigableMap&lt;K,V&gt;, Cloneable, java.io.Serializable{    /**     * The comparator used to maintain order in this tree map, or     * null if it uses the natural ordering of its keys.     *     * @serial     */    private final Comparator&lt;? super K&gt; comparator;    private transient Entry&lt;K,V&gt; root;    /**     * The number of entries in the tree     */    private transient int size = 0;    /**     * The number of structural modifications to the tree.     */    private transient int modCount = 0;    /**     * Constructs a new, empty tree map, using the natural ordering of its     * keys.  All keys inserted into the map must implement the {@link     * Comparable} interface.  Furthermore, all such keys must be     * &lt;em&gt;mutually comparable&lt;/em&gt;: {@code k1.compareTo(k2)} must not throw     * a {@code ClassCastException} for any keys {@code k1} and     * {@code k2} in the map.  If the user attempts to put a key into the     * map that violates this constraint (for example, the user attempts to     * put a string key into a map whose keys are integers), the     * {@code put(Object key, Object value)} call will throw a     * {@code ClassCastException}.     */    public TreeMap() {        comparator = null;    }    /**     * Constructs a new, empty tree map, ordered according to the given     * comparator.  All keys inserted into the map must be &lt;em&gt;mutually     * comparable&lt;/em&gt; by the given comparator: {@code comparator.compare(k1,     * k2)} must not throw a {@code ClassCastException} for any keys     * {@code k1} and {@code k2} in the map.  If the user attempts to put     * a key into the map that violates this constraint, the {@code put(Object     * key, Object value)} call will throw a     * {@code ClassCastException}.     *     * @param comparator the comparator that will be used to order this map.     *        If {@code null}, the {@linkplain Comparable natural     *        ordering} of the keys will be used.     */    public TreeMap(Comparator&lt;? super K&gt; comparator) {        this.comparator = comparator;    }    /**     * Constructs a new tree map containing the same mappings as the given     * map, ordered according to the &lt;em&gt;natural ordering&lt;/em&gt; of its keys.     * All keys inserted into the new map must implement the {@link     * Comparable} interface.  Furthermore, all such keys must be     * &lt;em&gt;mutually comparable&lt;/em&gt;: {@code k1.compareTo(k2)} must not throw     * a {@code ClassCastException} for any keys {@code k1} and     * {@code k2} in the map.  This method runs in n*log(n) time.     *     * @param  m the map whose mappings are to be placed in this map     * @throws ClassCastException if the keys in m are not {@link Comparable},     *         or are not mutually comparable     * @throws NullPointerException if the specified map is null     */    public TreeMap(Map&lt;? extends K, ? extends V&gt; m) {        comparator = null;        putAll(m);    }    /**     * Constructs a new tree map containing the same mappings and     * using the same ordering as the specified sorted map.  This     * method runs in linear time.     *     * @param  m the sorted map whose mappings are to be placed in this map,     *         and whose comparator is to be used to sort this map     * @throws NullPointerException if the specified map is null     */    public TreeMap(SortedMap&lt;K, ? extends V&gt; m) {        comparator = m.comparator();        try {            buildFromSorted(m.size(), m.entrySet().iterator(), null, null);        } catch (java.io.IOException cannotHappen) {        } catch (ClassNotFoundException cannotHappen) {        }    }    // Query Operations    /**     * Returns the number of key-value mappings in this map.     *     * @return the number of key-value mappings in this map     */    public int size() {        return size;    }    /**     * Returns {@code true} if this map contains a mapping for the specified     * key.     *     * @param key key whose presence in this map is to be tested     * @return {@code true} if this map contains a mapping for the     *         specified key     * @throws ClassCastException if the specified key cannot be compared     *         with the keys currently in the map     * @throws NullPointerException if the specified key is null     *         and this map uses natural ordering, or its comparator     *         does not permit null keys     */    public boolean containsKey(Object key) {        return getEntry(key) != null;    }    /**     * Returns {@code true} if this map maps one or more keys to the     * specified value.  More formally, returns {@code true} if and only if     * this map contains at least one mapping to a value {@code v} such     * that {@code (value==null ? v==null : value.equals(v))}.  This     * operation will probably require time linear in the map size for     * most implementations.     *     * @param value value whose presence in this map is to be tested     * @return {@code true} if a mapping to {@code value} exists;     *         {@code false} otherwise     * @since 1.2     */    public boolean containsValue(Object value) {        for (Entry&lt;K,V&gt; e = getFirstEntry(); e != null; e = successor(e))            if (valEquals(value, e.value))                return true;        return false;    }    /**     * Returns the value to which the specified key is mapped,     * or {@code null} if this map contains no mapping for the key.     *     * &lt;p&gt;More formally, if this map contains a mapping from a key     * {@code k} to a value {@code v} such that {@code key} compares     * equal to {@code k} according to the map's ordering, then this     * method returns {@code v}; otherwise it returns {@code null}.     * (There can be at most one such mapping.)     *     * &lt;p&gt;A return value of {@code null} does not &lt;em&gt;necessarily&lt;/em&gt;     * indicate that the map contains no mapping for the key; it's also     * possible that the map explicitly maps the key to {@code null}.     * The {@link #containsKey containsKey} operation may be used to     * distinguish these two cases.     *     * @throws ClassCastException if the specified key cannot be compared     *         with the keys currently in the map     * @throws NullPointerException if the specified key is null     *         and this map uses natural ordering, or its comparator     *         does not permit null keys     */    public V get(Object key) {        Entry&lt;K,V&gt; p = getEntry(key);        return (p==null ? null : p.value);    }    public Comparator&lt;? super K&gt; comparator() {        return comparator;    }    /**     * @throws NoSuchElementException {@inheritDoc}     */    public K firstKey() {        return key(getFirstEntry());    }    /**     * @throws NoSuchElementException {@inheritDoc}     */    public K lastKey() {        return key(getLastEntry());    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-LinkedHashMap"><a href="#3-LinkedHashMap" class="headerlink" title="3.LinkedHashMap"></a>3.LinkedHashMap</h2><ul><li><p>LinkedHashMap提供O(1)的查找和插入</p></li><li><p>键按照插入顺序排序，由双链桶实现</p></li><li><p>只包含独特的元素，可能由一个空键和多个空值</p></li><li><p>维持插入顺序</p></li><li><p>继承于HashMap，仅有维持插入顺序这一点与HashMap不同</p></li></ul><p>部分源码：</p><pre class="line-numbers language-none"><code class="language-none">public class LinkedHashMap&lt;K,V&gt;    extends HashMap&lt;K,V&gt;    implements Map&lt;K,V&gt;{    /*     * Implementation note.  A previous version of this class was     * internally structured a little differently. Because superclass     * HashMap now uses trees for some of its nodes, class     * LinkedHashMap.Entry is now treated as intermediary node class     * that can also be converted to tree form. The name of this     * class, LinkedHashMap.Entry, is confusing in several ways in its     * current context, but cannot be changed.  Otherwise, even though     * it is not exported outside this package, some existing source     * code is known to have relied on a symbol resolution corner case     * rule in calls to removeEldestEntry that suppressed compilation     * errors due to ambiguous usages. So, we keep the name to     * preserve unmodified compilability.     *     * The changes in node classes also require using two fields     * (head, tail) rather than a pointer to a header node to maintain     * the doubly-linked before/after list. This class also     * previously used a different style of callback methods upon     * access, insertion, and removal.     */    /**     * HashMap.Node subclass for normal LinkedHashMap entries.     */    static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; {        Entry&lt;K,V&gt; before, after;        Entry(int hash, K key, V value, Node&lt;K,V&gt; next) {            super(hash, key, value, next);        }    }    private static final long serialVersionUID = 3801124242820219131L;    /**     * The head (eldest) of the doubly linked list.     */    transient LinkedHashMap.Entry&lt;K,V&gt; head;    /**     * The tail (youngest) of the doubly linked list.     */    transient LinkedHashMap.Entry&lt;K,V&gt; tail;    /**     * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;     * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.     *     * @serial     */    final boolean accessOrder;    // internal utilities    // link at the end of list    private void linkNodeLast(LinkedHashMap.Entry&lt;K,V&gt; p) {        LinkedHashMap.Entry&lt;K,V&gt; last = tail;        tail = p;        if (last == null)            head = p;        else {            p.before = last;            last.after = p;        }    }    // apply src's links to dst    private void transferLinks(LinkedHashMap.Entry&lt;K,V&gt; src,                               LinkedHashMap.Entry&lt;K,V&gt; dst) {        LinkedHashMap.Entry&lt;K,V&gt; b = dst.before = src.before;        LinkedHashMap.Entry&lt;K,V&gt; a = dst.after = src.after;        if (b == null)            head = dst;        else            b.after = dst;        if (a == null)            tail = dst;        else            a.before = dst;    }    // overrides of HashMap hook methods    void reinitialize() {        super.reinitialize();        head = tail = null;    }    Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; e) {        LinkedHashMap.Entry&lt;K,V&gt; p =            new LinkedHashMap.Entry&lt;K,V&gt;(hash, key, value, e);        linkNodeLast(p);        return p;    }    Node&lt;K,V&gt; replacementNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next) {        LinkedHashMap.Entry&lt;K,V&gt; q = (LinkedHashMap.Entry&lt;K,V&gt;)p;        LinkedHashMap.Entry&lt;K,V&gt; t =            new LinkedHashMap.Entry&lt;K,V&gt;(q.hash, q.key, q.value, next);        transferLinks(q, t);        return t;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-HashTable"><a href="#4-HashTable" class="headerlink" title="4.HashTable"></a>4.HashTable</h2><ul><li>HashTable只包含独特的元素</li><li>可能没有任何空键和值</li><li>它是同步的</li><li>它是一个遗留类</li></ul><p>部分源码：</p><pre class="line-numbers language-none"><code class="language-none">public class Hashtable&lt;K,V&gt;    extends Dictionary&lt;K,V&gt;    implements Map&lt;K,V&gt;, Cloneable, java.io.Serializable {    /**     * The hash table data.     */    private transient Entry&lt;?,?&gt;[] table;    /**     * The total number of entries in the hash table.     */    private transient int count;    /**     * The table is rehashed when its size exceeds this threshold.  (The     * value of this field is (int)(capacity * loadFactor).)     *     * @serial     */    private int threshold;    /**     * The load factor for the hashtable.     *     * @serial     */    private float loadFactor;    /**     * The number of times this Hashtable has been structurally modified     * Structural modifications are those that change the number of entries in     * the Hashtable or otherwise modify its internal structure (e.g.,     * rehash).  This field is used to make iterators on Collection-views of     * the Hashtable fail-fast.  (See ConcurrentModificationException).     */    private transient int modCount = 0;    /** use serialVersionUID from JDK 1.0.2 for interoperability */    private static final long serialVersionUID = 1421746759512286392L;    /**     * Constructs a new, empty hashtable with the specified initial     * capacity and the specified load factor.     *     * @param      initialCapacity   the initial capacity of the hashtable.     * @param      loadFactor        the load factor of the hashtable.     * @exception  IllegalArgumentException  if the initial capacity is less     *             than zero, or if the load factor is nonpositive.     */    public Hashtable(int initialCapacity, float loadFactor) {        if (initialCapacity &lt; 0)            throw new IllegalArgumentException("Illegal Capacity: "+                                               initialCapacity);        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))            throw new IllegalArgumentException("Illegal Load: "+loadFactor);        if (initialCapacity==0)            initialCapacity = 1;        this.loadFactor = loadFactor;        table = new Entry&lt;?,?&gt;[initialCapacity];        threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1);    }    /**     * Constructs a new, empty hashtable with the specified initial capacity     * and default load factor (0.75).     *     * @param     initialCapacity   the initial capacity of the hashtable.     * @exception IllegalArgumentException if the initial capacity is less     *              than zero.     */    public Hashtable(int initialCapacity) {        this(initialCapacity, 0.75f);    }    /**     * Constructs a new, empty hashtable with a default initial capacity (11)     * and load factor (0.75).     */    public Hashtable() {        this(11, 0.75f);    }    /**     * Constructs a new hashtable with the same mappings as the given     * Map.  The hashtable is created with an initial capacity sufficient to     * hold the mappings in the given Map and a default load factor (0.75).     *     * @param t the map whose mappings are to be placed in this map.     * @throws NullPointerException if the specified map is null.     * @since   1.2     */    public Hashtable(Map&lt;? extends K, ? extends V&gt; t) {        this(Math.max(2*t.size(), 11), 0.75f);        putAll(t);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-选取适合的Hash数据结构"><a href="#5-选取适合的Hash数据结构" class="headerlink" title="5.选取适合的Hash数据结构"></a>5.选取适合的Hash数据结构</h2><ul><li>只有HashTable是同步的，提供线程安全</li><li>HashMap和HashTable是无序的，<ul><li>LinkedHashMap维护插入和访问插入顺序</li><li>TreeMap维持升序排序，也可自己定义Comparator接口，实现自定义排序</li></ul></li><li>HashMap和HashTable以及LinkedHashMap允许null作为键和值，但只允许一个单键<ul><li>TreeMap不允许null作为键，允许空值</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="软件技术" scheme="http://www.liniuniu.top/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="http://www.liniuniu.top/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/java/"/>
    
    
    <category term="Map" scheme="http://www.liniuniu.top/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 437. Path Sum III 路径总和 III</title>
    <link href="http://www.liniuniu.top/posts/7e0676ea.html"/>
    <id>http://www.liniuniu.top/posts/7e0676ea.html</id>
    <published>2021-09-27T06:13:00.000Z</published>
    <updated>2021-09-28T13:10:25.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given the <code>root</code> of a binary tree and an integer <code>targetSum</code>, return <em>the number of paths where the sum of the values along the path equals</em> <code>targetSum</code>.</p><p>The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).</p><p><strong>Example 1:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/pathsum3-1-tree.jpg" alt="img"></p><pre class="line-numbers language-none"><code class="language-none">Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8Output: 3Explanation: The paths that sum to 8 are shown.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22Output: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 1000]</code>.</li><li><code>-109 &lt;= Node.val &lt;= 109</code></li><li><code>-1000 &lt;= targetSum &lt;= 1000</code></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>针对二叉树相关的问题，优先考虑递归，可以设置两个函数，主函数和统计路径数量的遍历函数</p><p>主函数：遍历所有节点，传递节点给遍历函数</p><p>遍历函数：得到节点后，以节点为根节点，累加路径的数量</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>使用递归，遍历二叉树节点，并递归以此节点为根的二叉树，统计路径和</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for a binary tree node. * public class TreeNode { *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() {} *     TreeNode(int val) { this.val = val; } *     TreeNode(int val, TreeNode left, TreeNode right) { *         this.val = val; *         this.left = left; *         this.right = right; *     } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>sum<span class="token operator">==</span>node<span class="token punctuation">.</span>val<span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token operator">-</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">traverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token operator">-</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="recursion" scheme="http://www.liniuniu.top/tags/recursion/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 205. Isomorphic Strings 同构字符串</title>
    <link href="http://www.liniuniu.top/posts/3d60dd91.html"/>
    <id>http://www.liniuniu.top/posts/3d60dd91.html</id>
    <published>2021-09-26T15:01:00.000Z</published>
    <updated>2021-09-28T12:59:09.843Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given two strings <code>s</code> and <code>t</code>, <em>determine if they are isomorphic</em>.</p><p>Two strings <code>s</code> and <code>t</code> are isomorphic if the characters in <code>s</code> can be replaced to get <code>t</code>.</p><p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "egg", t = "add"Output: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "foo", t = "bar"Output: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "paper", t = "title"Output: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>分析：这道题要求判断两个字符串是否具有相同的结构，在遍历过程中，如果遍历到两个字符串中的字符，上一次出现的位置不同，那么可以判定它们是不同结构的</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>初始化两个空间为256的数组，遍历到两个字符串中的字符，上一次出现的位置不同，那么可以判定它们是不同结构的</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m1<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">!=</span>m2<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                m1<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                m2<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 680. Valid Palindrome II 验证回文子串II</title>
    <link href="http://www.liniuniu.top/posts/190801a7.html"/>
    <id>http://www.liniuniu.top/posts/190801a7.html</id>
    <published>2021-09-26T04:30:00.000Z</published>
    <updated>2021-09-28T13:22:46.298Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given a string <code>s</code>, return <code>true</code> <em>if the</em> <code>s</code> <em>can be palindrome after deleting <strong>at most one</strong> character from it</em>.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "aba"Output: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "abca"Output: trueExplanation: You could delete the character 'c'.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "abc"Output: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 105</code></li><li><code>s</code> consists of lowercase English letters.</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题求一个字符串在允许删掉一个字符的情况下，是否能成为回文串，由于回文子串的特性是首位相同，因此采用双指针方法解决问题。当双指针前后遍历字符串，遇到前后所指字符不同的情况时，有两种可能性，删除前指针或后指针所指的字符，那么可以采用||运算符。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>双指针遍历字符，若遇到不同的字符，则转到删除前或后指针所指字符后的判断函数。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> r<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>                r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">func</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>                r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="pointer" scheme="http://www.liniuniu.top/tags/pointer/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 44. Wildcard Matching 通配符匹配</title>
    <link href="http://www.liniuniu.top/posts/34851722.html"/>
    <id>http://www.liniuniu.top/posts/34851722.html</id>
    <published>2021-09-26T04:02:00.000Z</published>
    <updated>2021-09-26T04:34:19.862Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>'?'</code> and <code>'*'</code> where:</p><ul><li><code>'?'</code> Matches any single character.</li><li><code>'*'</code> Matches any sequence of characters (including the empty sequence).</li></ul><p>The matching should cover the <strong>entire</strong> input string (not partial).</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "aa", p = "a"Output: falseExplanation: "a" does not match the entire string "aa".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "aa", p = "*"Output: trueExplanation: '*' matches any sequence.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "cb", p = "?a"Output: falseExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 4:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "adceb", p = "*a*b"Output: trueExplanation: The first '*' matches the empty sequence, while the second '*' matches the substring "dce".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 5:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: s = "acdcb", p = "a*c?b"Output: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li><li><code>s</code> contains only lowercase English letters.</li><li><code>p</code> contains only lowercase English letters, <code>'?'</code> or <code>'*'</code>.</li></ul><p>分析：这道题求两个字符串是否匹配，考虑用动态规划解决问题，通配符在匹配时有三种情况，</p><p>第一种，s.charAt(i)==p.charAt(j)，那么其能否匹配与<code>dp[i-1][j-1]</code>相同</p><p>第二种，p.charAt(j)==’?’，这时无论s.charAt(i)的字符为何，皆可以匹配，与<code>dp[i-1][j-1]</code>相同</p><p>第三种，p.charAt(j)==’*’，这时相关情况可分为两类</p><p>​            第一类，*用于表示空格，此时与<code>dp[i][j-1]</code>相同</p><p>​            第二类，*用于表示一串字符，此时与<code>dp[i-1][j]</code>相同</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>根据以上分析，采用动态规划方法，动态规划方程为：</p><p><code>dp[i][j]=dp[i-1][j-1]</code>(s.charAt(i)==p.charAt(j)||p.charAt(j)==’?’)</p><p><code>dp[i][j]=dp[i-1][j]||dp[i][j-1])</code>(p.charAt(j)==’*’)，代码如下：</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>flag<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="dp" scheme="http://www.liniuniu.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 583. Delete Operation for Two Strings 两个字符串的删除操作</title>
    <link href="http://www.liniuniu.top/posts/345fb18b.html"/>
    <id>http://www.liniuniu.top/posts/345fb18b.html</id>
    <published>2021-09-25T06:02:00.000Z</published>
    <updated>2021-09-28T13:21:07.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.</p><p>In one step, you can delete exactly one character in either string.</p><p>Example 1:</p><pre class="line-numbers language-none"><code class="language-none">Input: word1 = "sea", word2 = "eat"Output: 2Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Example 2:</p><pre class="line-numbers language-none"><code class="language-none">Input: word1 = "leetcode", word2 = "etco"Output: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Constraints:</p><p>1 &lt;= word1.length, word2.length &lt;= 500<br>word1 and word2 consist of only lowercase English letters.</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题求找到使得word1和word2相同所需的最小步数，每步可以删除一个字符。字符串相关的问题，首先考虑动态规划，当遍历word1和word2时，有两种可能性情况，第一种：word1.charAt(i)==word2.charAt(j)，第二种：word1.charAt(i)!=word2.charAt(j)</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>采用动态规划方法，动态规划方程为：<code>dp[i][j]=dp[i-1][j-1](word(i)==word[j]),dp[i][j]=Math.min(dp[i-1][j],dp[i][j-1])+1(word[i]!=word[j])，</code>代码如下：</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span>word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="dp" scheme="http://www.liniuniu.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 115. Distinct Subsequences 两个字符串的删除操作</title>
    <link href="http://www.liniuniu.top/posts/973b595.html"/>
    <id>http://www.liniuniu.top/posts/973b595.html</id>
    <published>2021-09-25T06:02:00.000Z</published>
    <updated>2021-09-25T15:31:35.887Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given two strings s and t, return the number of distinct subsequences of s which equals t.</p><p>A string’s subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters’ relative positions. (i.e., “ACE” is a subsequence of “ABCDE” while “AEC” is not).</p><p>It is guaranteed the answer fits on a 32-bit signed integer.</p><p>Example 1:</p><pre class="line-numbers language-none"><code class="language-none">Input: s = "rabbbit", t = "rabbit"Output: 3Explanation:As shown below, there are 3 ways you can generate "rabbit" from S.rabbbitrabbbitrabbbit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Example 2:</p><pre class="line-numbers language-none"><code class="language-none">Input: s = "babgbag", t = "bag"Output: 5Explanation:As shown below, there are 5 ways you can generate "bag" from S.babgbagbabgbagbabgbagbabgbagbabgbag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Constraints:</p><p>1 &lt;= s.length, t.length &lt;= 1000<br>s and t consist of English letters.</p><p>分析：</p><p>这道题求字符串t在字符串s中出现的个数，看到字符串的个数求解，考虑用动态规划去解决问题。一级遍历字符串s，二级遍历t时，当s.charAt(i)==t.charAt(j)时，这时会出现两种情况，一种是，t中新出现的t.charAt(i)对于结果无影响，那么让其等于上一层即可,即<code>dp[i][j]=dp[i-1][j-1]</code>，第二种是，t中新出现的t.charAt(i)对于结在s的0—（i-1）之中存在,<code>dp[i][j]=dp[i-1][j]</code>。</p><p>如果s.charAt(i)!=t.charAt(j)那么上文中的第一种条件将不可能存在，那么只有第二种，即</p><p><code>dp[i][j]=dp[i-1][j]</code></p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>根据以上分析，采用动态规划方法，动态规划方程为：<code>dp[i][j]=dp[i-1][j-1]+dp[i-1][j](s.charAt(i)==t.charAt[j]),dp[i][j]=dp[i-1][j](s.charAt(i)!=t.charAt(j))</code>，代码如下：</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numDistinct</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&lt;</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="dp" scheme="http://www.liniuniu.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 371. Sum of Two Integers 两整数之和</title>
    <link href="http://www.liniuniu.top/posts/22becddc.html"/>
    <id>http://www.liniuniu.top/posts/22becddc.html</id>
    <published>2021-09-25T06:02:00.000Z</published>
    <updated>2021-09-28T13:09:29.806Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Given two integers <code>a</code> and <code>b</code>, return <em>the sum of the two integers without using the operators</em> <code>+</code> <em>and</em> <code>-</code>.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: a = 1, b = 2Output: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: a = 2, b = 3Output: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li><code>-1000 &lt;= a, b &lt;= 1000</code></li></ul><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>题目的要求非常简单，在不使用+-号及其相关符号的原则下，实现两个整数相加，优先考虑位运算，可以把需要进位和不需要进位的部分迭代运算。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>根据以上分析，对于需要进位的部分，用(a&amp;b)&lt;&lt;1实现，对于不需要进位，则用a^b的实现，不断迭代，代码如下：</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>            b<span class="token operator">=</span>a<span class="token operator">^</span>b<span class="token punctuation">;</span>            a<span class="token operator">=</span>index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://www.liniuniu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="http://www.liniuniu.top/tags/leetcode/"/>
    
    <category term="algorithm" scheme="http://www.liniuniu.top/tags/algorithm/"/>
    
    <category term="bit" scheme="http://www.liniuniu.top/tags/bit/"/>
    
  </entry>
  
  <entry>
    <title>Git的使用心得</title>
    <link href="http://www.liniuniu.top/posts/547feeee.html"/>
    <id>http://www.liniuniu.top/posts/547feeee.html</id>
    <published>2021-09-24T03:30:00.000Z</published>
    <updated>2021-09-24T09:53:41.726Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Git在Windows上的安装"><a href="#1-Git在Windows上的安装" class="headerlink" title="1.Git在Windows上的安装"></a>1.Git在Windows上的安装</h2><p>官方版本可以在 Git 官方网站下载。 打开 <a href="https://git-scm.com/download/win%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF%E3%80%82">https://git-scm.com/download/win，下载安装即可。</a></p><h2 id="2-Git的配置"><a href="#2-Git的配置" class="headerlink" title="2.Git的配置"></a>2.Git的配置</h2><p>安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git config --global user.name "li-niuniu"$ git config --global user.email myloveislizihao@163.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h4><p>如果想要检查你的配置，可以使用 <code>git config --list</code> 命令来列出所有 Git 当时能找到的配置。</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924125903265.png"></p><h2 id="3-Git文件的各种状态"><a href="#3-Git文件的各种状态" class="headerlink" title="3.Git文件的各种状态"></a>3.Git文件的各种状态</h2><h4 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h4><p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>推送到远程库</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924165839084.png"></p><h4 id="Git的工作区、暂存区和版本库"><a href="#Git的工作区、暂存区和版本库" class="headerlink" title="Git的工作区、暂存区和版本库"></a>Git的工作区、暂存区和版本库</h4><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li><li><strong>暂存区：</strong>英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong>工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924170020844.png"></p><h4 id="文件的已追踪和未追踪"><a href="#文件的已追踪和未追踪" class="headerlink" title="文件的已追踪和未追踪"></a>文件的已追踪和未追踪</h4><p>工作目录下的每一个文件都不外乎这两种状态：<strong>已跟踪</strong> 或 <strong>未跟踪</strong>。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后， 它们的状态可能是未修改，已修改或已放入暂存区。简而言之，已跟踪的文件就是 Git 已经知道的文件。</p><p>工作目录中除已跟踪文件外的其它所有文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有被放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 Git 刚刚检出了它们， 而你尚未编辑过它们。</p><p>编辑过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为已修改文件。 在工作时，你可以选择性地将这些修改过的文件放入暂存区，然后提交所有已暂存的修改，如此反复。</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/lifecycle.png"></p><h4 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h4><p>克隆仓库的命令是 <code>git clone &lt;url&gt;</code> 。 比如，要克隆提交作业的仓库，可以用下面的命令：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git clone https://gitee.com/fengjie_zstu/graduate-single-program2021.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h4><p>可以用 <code>git status</code> 命令查看哪些文件处于什么状态。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出：</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924140554567.png"></p><p>所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。</p><p>现在，创建一个新的<code>test/test.txt</code>文件。 如果之前并不存在这个文件，使用 <code>git status</code> 命令，你将看到一个新的未跟踪文件：</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924142740202.png"></p><p>使用命令 <code>git add</code>可以跟踪一个文件。 所以，要跟踪 <code>test/test.txt</code> 文件，运行：</p><pre class="line-numbers language-none"><code class="language-none">git add test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时再运行 <code>git status</code> 命令，会看到 <code>test/test.txt</code> 文件已被跟踪，并处于暂存状态:</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924143124340.png"></p><p>如果修改一个已被跟踪的文件，运行<code>git add</code>命令可以重新放到暂存区</p><h4 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h4><p>已修改但未暂存的文件只会保留在本地磁盘。 所以，每次准备提交前，先用 <code>git status</code> 看下，你所需要的文件是不是都已暂存起来了， 然后再运行提交命令 <code>git commit</code>：</p><pre class="line-numbers language-none"><code class="language-none">git commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924144147905.png"></p><h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4><p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 <code>git log</code> 命令。</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924144625010.png"></p><h4 id="去掉已经托管在本地的文件"><a href="#去掉已经托管在本地的文件" class="headerlink" title="去掉已经托管在本地的文件"></a>去掉已经托管在本地的文件</h4><p>如果想去掉已经托管在本地的文件，将文件变为未追踪的文件，可以使用<code>git rm</code>命令：</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924165155686.png"></p><h2 id="4-远程仓库"><a href="#4-远程仓库" class="headerlink" title="4.远程仓库"></a>4.远程仓库</h2><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><p>如果想查看你已经配置的远程仓库服务器，可以运行 <code>git remote -v</code>  命令。 它会列出你指定的每一个远程服务器的简写和对应的URL。 如果你已经克隆了自己的仓库，那么至少应该能看到 origin ——这是 Git 给你克隆的仓库服务器的默认名字：</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924145511192.png"></p><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><p>运行 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 添加一个新的远程 Git 仓库，同时指定一个方便使用的简写：</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924145802838.png"></p><p>现在可以在命令行中使用字符串 <code>abc</code> 来代替整个 URL。 例如，如果你想拉取URL对应的仓库中有但你没有的信息，可以运行 <code>git pull origin</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924150355597.png"></p><p>这说明目前远程仓库的内容已经全部被抓取到本地仓库</p><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p>当你想分享你的项目时，必须将其推送到上游。 这个命令：<code>git push &lt;remote&gt; &lt;branch&gt;</code>。 当你想要将 <code>master</code> 分支推送到 <code>origin</code> 服务器时（克隆时通常会自动帮你设置好那两个名字）， 那么运行这个命令就可以将你所做的备份到服务器：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924151226584.png"></p><p>只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先抓取他们的工作并将其合并进你的工作后才能推送。</p><h4 id="远程仓库的重命名与移除"><a href="#远程仓库的重命名与移除" class="headerlink" title="远程仓库的重命名与移除"></a>远程仓库的重命名与移除</h4><p>以运行 <code>git remote rename</code> 来修改一个远程仓库的简写名。 例如，想要将 <code>abc</code> 重命名为 <code>def</code>，可以用 <code>git remote rename</code> 这样做：</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924151528374.png"></p><p>值得注意的是这同样也会修改你所有远程跟踪的分支名字。 那些过去引用 <code>abc/master</code> 的现在会引用 <code>def/master</code>。</p><p>如果想要移除一个远程仓库,可以使用 <code>git remote remove</code> 或 <code>git remote rm</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924151808763.png"></p><h2 id="5-Git分支"><a href="#5-Git分支" class="headerlink" title="5.Git分支"></a>5.Git分支</h2><h3 id="分支创建"><a href="#分支创建" class="headerlink" title="分支创建"></a>分支创建</h3><p>Git 是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 <code>git branch</code> 命令：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git branch testing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会在当前所在的提交对象上创建一个指针。</p><p>当需要在非当前分支上工作时，需要使用<code>git checkout</code>命令:</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout testing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>某些场景下，需要合并两个分支，则需要使用<code>git merge</code>命令:</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout master$ git merge testing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样testing分支中的内容会合并至master之中</p><h2 id="6-在Intellij-Idea中暂存，提交并推送"><a href="#6-在Intellij-Idea中暂存，提交并推送" class="headerlink" title="6.在Intellij Idea中暂存，提交并推送"></a>6.在Intellij Idea中暂存，提交并推送</h2><h4 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h4><p>当做了更改之后，</p><p>右键文件，点击git分支下的add，将其放到暂存区中</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924174240592.png"></p><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p>点击git分支下的commit file，并在弹出的对话框中输入提交信息，将其提交本地库中</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924174427415.png"></p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924174600718.png"></p><h4 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h4><p>点击右下角branch分支，核对本地分支及远程库之后，点击local branches下的branch，点击push即可</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924174715285.png"></p><h2 id="7-在Vscode中暂存，提交并推送"><a href="#7-在Vscode中暂存，提交并推送" class="headerlink" title="7.在Vscode中暂存，提交并推送"></a>7.在Vscode中暂存，提交并推送</h2><h4 id="暂存-1"><a href="#暂存-1" class="headerlink" title="暂存"></a>暂存</h4><p>当做了更改之后，</p><p>点击左边第三个，源代码管理</p><p>点击更改栏目下的test_vscode.md右边的加号，将其放到暂存的更改中</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924173240036.png"></p><h4 id="提交-1"><a href="#提交-1" class="headerlink" title="提交"></a>提交</h4><p>点击源代码管理右侧的对号，并在弹出的对话框填入提交消息</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924173517226.png"></p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924173606680.png"></p><h4 id="推送-1"><a href="#推送-1" class="headerlink" title="推送"></a>推送</h4><p>核对本地分支及远程库之后，在如下界面点击推送即可</p><p><img src="https://cdn.jsdelivr.net/gh/cumark/picBed/image-20210924173740184.png"></p><p>参考链接：</p><p><a href="https://git-scm.com/doc">https://git-scm.com/doc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="软件技术" scheme="http://www.liniuniu.top/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Git" scheme="http://www.liniuniu.top/tags/Git/"/>
    
    <category term="代码托管" scheme="http://www.liniuniu.top/tags/%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1/"/>
    
  </entry>
  
</feed>
